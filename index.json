[{"content":"","date":null,"permalink":"/tags/downunderctf/","section":"Tags","summary":"","title":"DownUnderCTF"},{"content":"Prompt # I accidentally set my system shell to the Python help() function! Help!!\nThe flag is at /home/ductf/flag.txt.\nThe password for the ductf user is ductf.\nssh ductf@2023.ductf.dev -p 30022\nSolution # After connecting to the target, the following shell is spawned:\n$ ssh ductf@2023.ductf.dev -p 30022 ductf@2023.ductf.dev\u0026#39;s password: ductf Last login: Sun Sep 3 09:24:32 2023 from 10.152.0.19 Welcome to Python 3.10\u0026#39;s help utility! If this is your first time using Python, you should definitely check out the tutorial on the internet at https://docs.python.org/3.10/tutorial/. Enter the name of any module, keyword, or topic to get help on writing Python programs and using Python modules. To quit this help utility and return to the interpreter, just type \u0026#34;quit\u0026#34;. To get a list of available modules, keywords, symbols, or topics, type \u0026#34;modules\u0026#34;, \u0026#34;keywords\u0026#34;, \u0026#34;symbols\u0026#34;, or \u0026#34;topics\u0026#34;. Each module also comes with a one-line summary of what it does; to list the modules whose name or summary contain a given string such as \u0026#34;spam\u0026#34;, type \u0026#34;modules spam\u0026#34;. help\u0026gt; This is a Python feature of an interactive help shell, which spawns a less child process of the documentation for known objects. You can enter to a less by entering a name of a Python object you know, such as True.\nAccording to the awesome resource GTFOBins, less can switch the file shown on screen without having to kill the main process. This can be done by typing :e /home/ductf/flag.txt into the current less session, which would display the flag DUCTF{sometimes_less_is_more} in a child less process.\n","date":"2023-09-03","permalink":"/posts/downunderctf/helpless/","section":"Posts","summary":"DownUnderCTF 2023 helpless challenge","title":"DownUnderCTF helpless"},{"content":"","date":null,"permalink":"/","section":"Omri Bornstein","summary":"","title":"Omri Bornstein"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/unix/","section":"Tags","summary":"","title":"UNIX"},{"content":" 2023 Certificate 2022 Certificate ","date":null,"permalink":"/posts/downunderctf/","section":"Posts","summary":"DownUnderCTF solutions","title":"DownUnderCTF"},{"content":"","date":"2023-08-26","permalink":"https://podcasts.apple.com/us/podcast/an-interview-with-omri-about-hebrew/id1703353761?i=1000625680149\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"Let's Chat Languages: Hebrew \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/podcast/","section":"Tags","summary":"","title":"Podcast"},{"content":"","date":null,"permalink":"/talks/radmon/","section":"Talks \u0026 Publications","summary":"","title":"Radio Monash (RadMon)"},{"content":"","date":null,"permalink":"/tags/radmon/","section":"Tags","summary":"","title":"RadMon"},{"content":"","date":null,"permalink":"/tags/angular/","section":"Tags","summary":"","title":"Angular"},{"content":"","date":null,"permalink":"/tags/dependencies/","section":"Tags","summary":"","title":"dependencies"},{"content":"","date":"2023-08-24","permalink":"https://www.meetup.com/golang-mel/events/293777783/\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"From JavaScript to Go: Quicker \u0026 Simpler Web Page Scraping \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go"},{"content":"","date":null,"permalink":"/tags/goreleaser/","section":"Tags","summary":"","title":"GoReleaser"},{"content":"","date":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript"},{"content":"","date":null,"permalink":"/tags/logging/","section":"Tags","summary":"","title":"logging"},{"content":"","date":null,"permalink":"/talks/meetup/","section":"Talks \u0026 Publications","summary":"Community Meetups Talk","title":"Meet-ups"},{"content":"","date":null,"permalink":"/tags/nestjs/","section":"Tags","summary":"","title":"NestJS"},{"content":"","date":null,"permalink":"/tags/typescript/","section":"Tags","summary":"","title":"TypeScript"},{"content":"","date":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":"","date":"2023-08-16","permalink":"https://youtu.be/xLVxnu9vgos\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"Reverse Shell Workshop \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/youtube/","section":"Tags","summary":"","title":"YouTube"},{"content":"","date":null,"permalink":"/tags/c/","section":"Tags","summary":"","title":"C"},{"content":"","date":null,"permalink":"/tags/ghidra/","section":"Tags","summary":"","title":"Ghidra"},{"content":"","date":null,"permalink":"/tags/kali/","section":"Tags","summary":"","title":"Kali"},{"content":"","date":"2023-07-26","permalink":"https://youtu.be/pCxelNdDQvM\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"Reverse Engineering with Ghidra (2023) \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/reversing/","section":"Tags","summary":"","title":"reversing"},{"content":"","date":"2023-07-19","permalink":"https://monsec.io/posts/2023s2/\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"MonSec 2023 Semester 2 \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/caddy/","section":"Tags","summary":"","title":"Caddy"},{"content":"","date":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker"},{"content":"","date":null,"permalink":"/tags/http/","section":"Tags","summary":"","title":"http"},{"content":"","date":null,"permalink":"/tags/https/","section":"Tags","summary":"","title":"https"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"","date":null,"permalink":"/tags/server/","section":"Tags","summary":"","title":"server"},{"content":"Whether you\u0026rsquo;re testing HTTPS for a bunch of endpoints locally through a localhost port, or whether you just like to name things, to me it sounds like you need to use a reverse proxy. While working on a Dockerfile for this website (if I ever need to self-host it), I re-discovered Caddy after learning about it from MonSec\u0026rsquo;s usage of it as a CTFd reverse-proxy.\nLocal Certificate Authority # Caddy can spin-up a local certificate authority for SSL certificates, which is not trusted by browsers. If you want to simulate valid HTTPS certificates, you can add Caddy\u0026rsquo;s certificate authority (CA) to the trusted authorities list of your operating system by running caddy trust.\nAccording to Caddy\u0026rsquo;s documentation:\nIt is safe to trust Caddy\u0026rsquo;s root certificate on your own machine as long as your computer is not compromised and your unique root key is not leaked.\nTherefore, it would be advisable to run caddy untrust as soon as you finish testing HTTPS locally.\nReverse Proxy # Caddy can act as a reverse-proxy between a client and a server by adding an SSL certificate at the transport layer for transport layer tempering detection. It requires the proxied server to be accessible from the machine Caddy runs on, which in this use case is just a raker\u0026rsquo;s TCP port on localhost.\nCaddyfile (to be mounted at /etc/caddy/Caddyfile in containers): raker.local { reverse_proxy localhost:4100 } CLI caddy reverse-proxy --from raker.local --to localhost:4100 File Server # Caddy can also act as a static file server, which is particularly useful for self-hosting websites such as this with an SSL certificate. In this use case, Caddy serves static files generated by Hugo.\nCaddyfile (to be mounted at /etc/caddy/Caddyfile in containers): hugo.local { root * public file_server } CLI caddy file-server --root public --domain hugo.local ","date":"2023-07-06","permalink":"/posts/caddy/","section":"Posts","summary":"Testing HTTPS Locally with Caddy","title":"Testing HTTPS Locally with Caddy"},{"content":"Do you know that your smartphone saves the location of your photos inside the file itself? Or that your image editing software declares that it processed your pictures? Even when most mainstream websites and static site generators wipe EXIF metadata before they expose your uploaded images, it is still important to understand what metadata can be stored inside your images. When you upload unprocessed pictures to a publicly-accessible server such as a website or a public git repository (on GitHub, GitLab, Gitea or self-hosted), making sure that no sensitive metadata that is is left for anybody on the internet to look at.\nCommand-line Interfaces # In case you want to wipe out all EXIF metadata from command-line as part of an automated image processing pipeline, or just for fun, exiftool is an awesome open-source command-line utility that makes it easy to edit EXIF (and other formats). For further details about other more granular toggles that I don\u0026rsquo;t cover here, please refer to the exiftool documentation.\nKeeping Adobe Colour Metadata # For some reason, Adobe chose to store some colouring information in the EXIF header of files that are produced by their software. In order to maintain visual detail but still remove the rest of the EXIF header, the -All= toggle can be used.\n# remove all EXIF data a except for the APP14 Adobe block exiftool -All= image.jpg Removing All Metadata # If you really want to remove all metadata, the -all= toggle should be used for more aggressive metadata cleaning.\n# remove all EXIF data exiftool -all= image.jpg Graphical Interfaces # Windows ","date":"2023-06-08","permalink":"/posts/exif/","section":"Posts","summary":"Clearing EXIF metadata with exiftool","title":"Clearing EXIF Metadata from Pictures"},{"content":"","date":null,"permalink":"/tags/exif/","section":"Tags","summary":"","title":"EXIF"},{"content":"","date":null,"permalink":"/posts/go/","section":"Posts","summary":"","title":"Go"},{"content":"In numerous cases, such as my general-purpose file watcher stalk, software needs to be aware of changes in files in near-real-time and respond to them. Luckily, the fsnotify library implements a Go-native channel-based interface that works seamlessly across operating systems that enables Go developers to tap into the host machine\u0026rsquo;s file system based on specific events.\nRequired Packages # The following packages are required for time measurements, OS-level APIs and user signal handling.\nimport ( \u0026#34;os\u0026#34; \u0026#34;os/signal\u0026#34; \u0026#34;syscall\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/fsnotify/fsnotify\u0026#34; ) Initialising Watcher # Firstly, the file watcher has to be initialised, and while I\u0026rsquo;m at it, I\u0026rsquo;ll also create a fatal errors channel for the termination logic I\u0026rsquo;ll discuss later.\nwatcher, err := fsnotify.NewWatcher() if err != nil { return err } defer watcher.Close() // fatal error channel errs := make(chan error, 1) Watching for Events # In a separate thread, the file watcher listens to its multiplexed events and errors channels. For the events channel I found that sometimes more than one write events are received every time I save a file (from a text editor), which is why I choose to ignore subsequent events that are less than 10th of a second from their predecessor. In addition, I found some events had an empty Name property, which is probably related to a write event on one of the root directories the file watcher is assigned to. At present, I filter out the above-mentioned subset of events because this subset of events has no meaning for a general file watcher like stalk, but you should decide for your use case how much filtering your code should perform.\nAfter filtering out unwanted events, you can write custom code that handles this events as per your use case.\ngo func() { lastEventTime := time.Unix(0, 0) for { select { case event := \u0026lt;-watcher.Events: eventType := event.Op != fsnotify.Write \u0026amp;\u0026amp; event.Op != fsnotify.Create eventTime := time.Since(lastEventTime) \u0026lt;= time.Second/10 if event.Name == \u0026#34;\u0026#34; || eventType || eventTime { continue } // do something in a thread-safe manner case err := \u0026lt;-watcher.Errors: // deal with error, can either stop watching by breaking from the loop // can report error by pushing to global error channel } } }() Adding Files to Watch # While the file watcher waits for events, a separate thread adds the files to be watched in parallel. These files can be obtained from command-line arguments, an external file, an array/slice, an network request or any other method that enables you to iterate over a file path list.\ngo func() { // assuming a files array/slice is available for _, path := range files { if err := watcher.Add(path); err != nil { // handle file system error } } }() Termination # In order to enable clean termination upon request or fatal error such that the file watcher is closed correctly, I tend to wait to either for a user-issued signal (sent by the signals channel), or to a fatal error (sent by the logic shown above through the errs channel). Assuming the file watcher initialisation and termination logic are in the same function, any return statement after the file watcher\u0026rsquo;s creation will trigger its defer statement, thus exiting cleanly. If this is not the case, the file watcher\u0026rsquo;s Close method can be called without deferring.\nsignals := make(chan os.Signal, 1) signal.Notify(signals, os.Interrupt, syscall.SIGINT, syscall.SIGQUIT) select { case \u0026lt;-signals: // respond to user-issued termination signal case err := \u0026lt;-errs: // respond to error } // triggering the defer statement shown above return My Use Cases # My general-purpose file watcher implements a variation of the above-mentioned logic in two ways:\nstalk wait waits for a single file system event that applies to its set of paths, supplied by its command arguments. stalk watch continuously watches for file system events that applies to its set of paths (supplied by its command arguments), and runs a shell command for each until stopped by a fatal error or the user. I use it for observing live changes in my Pandoc-$\\LaTeX$ files, and live-reloading my HTTP server code as I edit and re-save it, all across both Linux and macOS systems.\n","date":"2023-06-08","permalink":"/posts/go/fsnotify/","section":"Posts","summary":"Watching for File Changes in Go with FSnotify","title":"Watching for File Changes in Go"},{"content":"","date":null,"permalink":"/tags/charm/","section":"Tags","summary":"","title":"Charm"},{"content":"","date":null,"permalink":"/tags/cli/","section":"Tags","summary":"","title":"CLI"},{"content":"Why? # Whenever you debug a program that produces a large amount of logs, sifting through them when a bug arises is only a matter of time. This tasks becomes more annoying when there is no consistent pattern you focus on with grep, especially when you want to find a pattern between related log lines that aren\u0026rsquo;t immediately next to each other in the log file. When I resort to manually looking through logs of programs I\u0026rsquo;m debugging, having colour-coded logs tends to make the experience more fun.\nAn r/ProgrammerHumor post describing the lack of colour in logs How? # I recently found a logging library by Charm, a start-up dedicated to making pleasing-to-use libraries, utilities and application that are centered around the command-line experience. Since I never really thought of making my programs\u0026rsquo; command-line output easy to read, I thought of giving it a try.\nCustom Logger # For my personal project, I override the default package settings with the following:\nEach log line reports what source code line printed it. RFC 3339 timestamp format In order to show debugging logs by default, the default logging level is be set to log.DebugLevel. import ( \u0026#34;time\u0026#34; \u0026#34;github.com/charmbracelet/log\u0026#34; ) func init() { log.SetReportCaller(true) log.SetTimeFormat(time.RFC3339) log.SetLevel(log.DebugLevel) } Result # In the following section, I\u0026rsquo;ll show some code snippets and the output they produce (captured with vhs).\nInformation/Success # Regular logs are shown with a green-coloured INFO prefix.\nlog.Info(\u0026#34;Hi there!\u0026#34;, \u0026#34;version\u0026#34;, runtime.Version()) log.Infof(\u0026#34;%d + 0x%x = 0b%b\u0026#34;, 22, 0x56, 22+0x56) Debugging # Debug logs are shown with a blue-coloured DEBU prefix.\nlog.Debug(\u0026#34;Hi there!\u0026#34;, \u0026#34;version\u0026#34;, runtime.Version()) log.Debugf(\u0026#34;%d + 0x%x = 0b%b\u0026#34;, 22, 0x56, 22+0x56) Warning # Warning logs are shown with a yellow-coloured WARN prefix.\nlog.Warn(\u0026#34;Hi there!\u0026#34;, \u0026#34;version\u0026#34;, runtime.Version()) log.Warnf(\u0026#34;%d + 0x%x = 0b%b\u0026#34;, 22, 0x56, 22+0x56) Error \u0026amp; Fatal # Error logs are shown with a red-coloured ERRO prefix. Fatal logs are shown with a purple-coloured FATA prefix. Any call to log.Fatal or to log.Fatalf will result in the program exiting immediately with code 1. log.Error(\u0026#34;Hi there!\u0026#34;, \u0026#34;version\u0026#34;, runtime.Version()) log.Errorf(\u0026#34;%d + 0x%x = 0b%b\u0026#34;, 22, 0x56, 22+0x56) log.Fatal(\u0026#34;goodbye\u0026#34;) ","date":"2023-05-20","permalink":"/posts/go/log/","section":"Posts","summary":"Colourful Logging in Go","title":"Colourful Logging in Go"},{"content":"In this document, I summarise what Bubble Tea components (colloquially named bubbles) I use for my personal projects, as I find more uses for them.\nTimed Progress Bar # running cocainate -d 5s with a timed progress bar Required Packages \u0026amp; Constants # The following packages are required in oder to access the Bubble Tea interfaces, component logic and styling functionality. In addition, I defined some utility variables for functions I use throughout the display logic.\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; // progress bar rendering \u0026#34;github.com/charmbracelet/bubbles/progress\u0026#34; // shared functions \u0026amp; typing definitions tea \u0026#34;github.com/charmbracelet/bubbletea\u0026#34; // colour support \u0026#34;github.com/charmbracelet/lipgloss\u0026#34; ) var ( quitMessage = tea.Sequence(tea.ShowCursor, tea.Quit) renderMessage = tea.Sequence(tea.ShowCursor, tickCommand()) helpStyle = lipgloss.NewStyle().Foreground(lipgloss.Color(\u0026#34;#FFFFFF\u0026#34;)).Render ) Model # Initialising a new progress bar requires the time it takes to complete, and a channel for termination signals. The initialisation function returns a reference to a tea.Program object that can be forcefully terminated when required.\ntype model struct { // display the total duration below the progress bar duration time.Duration // percentage amount to increase the progress on each second amount float64 // current percentage percentage float64 // progress bar type from Bubble Tea p progress.Model } func New(duration time.Duration, signals chan os.Signal) *tea.Program { m := \u0026amp;model{ duration: duration, amount: 1 / duration.Seconds(), percentage: 0, p: progress.New(progress.WithSolidFill(\u0026#34;#FFFFFF\u0026#34;)), } program := tea.NewProgram(m) go func() { program.Run() signals \u0026lt;- os.Interrupt }() return program } Initialisation # In order for our progress bar model to comply with the tea.Model interface, it must have an Init, Update and View methods. The tickCommand function is shared between the Init and Update methods, and is used just to return the current time, such that the progress bar is initialised correctly and updated every second.\nfunc tickCommand() tea.Cmd { return tea.Tick(time.Second, func(t time.Time) tea.Msg { return t }) } func (m model) Init() tea.Cmd { return tickCommand() } Updating # The Update method runs every second, and increments the progress bar with the previously-set amount variable. The first time it runs, it records the width of the terminal window, such that the progress bar\u0026rsquo;s width is appropriate to the window size. When any key press is detected, the progress bar is signaled to stop.\nfunc (m model) Update(message tea.Msg) (tea.Model, tea.Cmd) { switch message := message.(type) { case tea.KeyMsg: return m, quitMessage case tea.WindowSizeMsg: m.p.Width = message.Width return m, nil case time.Time: m.percentage += m.amount if m.percentage \u0026gt;= 1.0 { return m, quitMessage } return m, tickCommand() default: return m, nil } } The View method simply returns a string representation of the progress bar after every time it updates. In this version, I also chose to display the current and total time below the progress bar, such that the current time can be read even if the progress bar has not updated graphically.\nfunc (m model) View() string { return fmt.Sprintf(\u0026#34;%s\\n%s/%s\\n%s\u0026#34;, m.p.ViewAs(m.percentage), time.Duration(float64(m.duration)*m.percentage).Round(time.Second), m.duration, helpStyle(\u0026#34;Press any key to quit\u0026#34;), ) } Usage # In the following example from the cocainate source code, a new progress bar program is initialised. It can either terminate naturally when it\u0026rsquo;s time is up, or it can terminate forcefully when the user stops the process.\nprogram := progress_bar.New(s.Duration, s.Signals) timer := time.NewTimer(s.Duration) select { case \u0026lt;-timer.C: case \u0026lt;-s.Signals: timer.Stop() program.Kill() } ","date":"2023-05-20","permalink":"/posts/go/bubbletea/","section":"Posts","summary":"TUI Components in Go with Bubble Tea","title":"TUI Components in Go with Bubble Tea"},{"content":"","date":null,"permalink":"/tags/vhs/","section":"Tags","summary":"","title":"VHS"},{"content":"","date":null,"permalink":"/tags/latex/","section":"Tags","summary":"","title":"LaTeX"},{"content":"Pre-requisites # VSCode (or any other compatible fork) James Yu\u0026rsquo;s LaTeX Workshop extension An installation of a LaTeX distribution (such as TeXLive) LuaLaTeX/LuaTeX (or your preferred LaTeX compiler) latexmk Settings # The following JSON code can be added to either the projects settings at .vscode/settings.json, or to the global settings at ~/.config/Code/User/settings.json such that LuaLaTeX is used to compile .tex files every time they are saved within VSCode.\n{ // ... \u0026#34;latex-workshop.latex.tools\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;lualatexmk\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-lualatex\u0026#34;, \u0026#34;-outdir=%OUTDIR%\u0026#34;, \u0026#34;%DOC%\u0026#34; ] } ], \u0026#34;latex-workshop.latex.recipes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;lualatexmk\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;lualatexmk\u0026#34;, ] } ], // ... } These settings can be further modified if you need to use multiple compilation steps in sequence, or if you want to use different compilation settings. I found latexmk to be immensely useful when a document should be compiled multiple times, especially when a single compilation produces metadata for a subsequent compilation.\nDisabling Automatic Compilation # In case you want to work on a .tex document, but you don\u0026rsquo;t VSCode to compile it for you every time you save it, you can override the global settings with the following JSON code, added to .vscode/settings.json.\n{ // ... \u0026#34;latex-workshop.latex.recipes\u0026#34;: [], \u0026#34;latex-workshop.latex.autoBuild.run\u0026#34;: \u0026#34;never\u0026#34;, // ... } ","date":"2023-05-13","permalink":"/posts/tex/vscode/","section":"Posts","summary":"LaTeX Settings for VSCode","title":"LaTeX Settings for VSCode"},{"content":"","date":null,"permalink":"/tags/tex/","section":"Tags","summary":"","title":"TeX"},{"content":"","date":null,"permalink":"/posts/tex/","section":"Posts","summary":"","title":"TeX \u0026 LaTeX"},{"content":"","date":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"VSCode"},{"content":"","date":null,"permalink":"/tags/dependabot/","section":"Tags","summary":"","title":"Dependabot"},{"content":"","date":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git"},{"content":"","date":null,"permalink":"/posts/git/","section":"Posts","summary":"","title":"Git"},{"content":"","date":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"GitHub"},{"content":"Pre-requisites # Create a new dependencies issue label on your GitHub repository. Ecosystems # Each package ecosystem can be added to the updates list in your .github/dependabot.yml file found at the root of your repository file tree with its own settings.\nGo # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: gomod directory: / schedule: interval: daily assignees: - AppleGamer22 reviewers: - AppleGamer22 commit-message: prefix: chore labels: - dependencies JavaScript \u0026amp; TypeScript # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: npm # ... Python # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: pip # ... Docker # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: docker # ... GitHub Actions # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: github-actions # ... Terraform # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: terraform # ... ","date":"2023-04-14","permalink":"/posts/git/dependabot/","section":"Posts","summary":"GitHub Supply Chain Security with Dependabot","title":"GitHub Supply Chain Security with Dependabot"},{"content":"","date":"2023-03-22","permalink":"https://youtu.be/WXTVsIHrAKM\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"Introduction to Command-line Linux \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"This document summarises how I use Charm\u0026rsquo;s vhs to capture and document command-line interactions.\nGeneral Configuration # I tend to like capturing my preferred shell, prompt and font, all of which can be configured in the header of a .tape file.\nOutput command.gif Set FontSize 18 Set Shell zsh # or \u0026#34;FiraCode Nerd Font\u0026#34; Set FontFamily \u0026#34;Fira Code\u0026#34; # Set Margin 1 # time for the shell to load Hide Type eval \u0026#34;$(starship init zsh)\u0026#34; Enter Sleep 1s Type clear Enter Show # or any other command Type neofetch Sleep 500ms Enter # more time might be required for more time-consuming processes Sleep 500ms Before generating the GIF, you need to have FFmpeg and ttyd installed.\nvhs \u0026lt; cassette.tape Examples # Tab Completion # Since vhs requires the pauses between operation to be precise, this assumption also applies in waiting for tab completions to appear on the screen. It is important to ensure that each operation is clearly captured, by having an appropriate amount of time where vhs waits for the shell to respond to the key presses.\nOutput starship.gif Set FontSize 18 Set Shell zsh Set FontFamily \u0026#34;Fira Code\u0026#34; Hide Type eval \u0026#34;$(starship init zsh)\u0026#34; Enter Sleep 1s Type clear Enter Show Type ls Enter Sleep 500ms Type hu Tab Sleep 1000ms Tab Sleep 500ms Enter Sleep 500ms Tab Sleep 500ms Tab Sleep 500ms Up Sleep 500ms Enter Sleep 500ms Enter Sleep 1000ms Type cat starship.tape Enter Sleep 1000ms My command-line prompt with tab completion Character Escaping # Commands with more arguments and special character should be surrounded by quotes to ensure correct parsing and execution by vhs.\nOutput starship.gif Set FontSize 18 Set Shell zsh Set FontFamily \u0026#34;Fira Code\u0026#34; Hide Type eval \u0026#34;$(starship init zsh)\u0026#34; Enter Sleep 1s Type clear Enter Show Type \u0026#34;goreleaser release --clean --snapshot --skip-publish\u0026#34; Enter Sleep 5s Type tree dist Enter Sleep 500ms GoReleaser running a non-production build ","date":"2023-03-12","permalink":"/posts/vhs/","section":"Posts","summary":"Capturing Commands as GIFs with VHS","title":"Capturing Commands as GIFs with VHS"},{"content":"","date":null,"permalink":"/tags/hashicorp/","section":"Tags","summary":"","title":"HashiCorp"},{"content":"","date":null,"permalink":"/tags/vagrant/","section":"Tags","summary":"","title":"Vagrant"},{"content":"","date":null,"permalink":"/posts/vagrant/","section":"Posts","summary":"My Vagrant configurations","title":"Vagrant"},{"content":"In this document, I\u0026rsquo;ll demonstrate how I use Steve Francia\u0026rsquo;s cobra library, which enables the interchangeable usage of environment variable and a configuration file for the same Go program.\nFor the purposes of simplicity, I assume that all of the code snippets shown here are part of the main package. However, I recommend authors of large codebases to employ a multi-package taxonomy, such that their code is more organised and maintainable.\nParent-level Commands # The parent level is the command that is in the root of the CLI command tree or any command with sub-commands registered to it. In Cobra command can have separate functions for its set-up, validation an execution stages, along with metadata about it that can be used to print support documentation.\nimport \u0026#34;github.com/spf13/cobra\u0026#34; var ( Version = \u0026#34;development\u0026#34; ParentCommand = cobra.Command{ Use: \u0026#34;parent\u0026#34;, Short: \u0026#34;parent command\u0026#34;, Long: \u0026#34;parent command\u0026#34;, Version: Version, PreRunE: func(cmd *cobra.Command, args []string) error { // prepare environment (such as files) and return error/nil ... }, Args: func(cmd *cobra.Command, args []string) error { // check command input and return error/nil ... }, RunE: func(cmd *cobra.Command, args []string) error { // do your thing and return error/nil ... }, } ) func init() { ParentCommand.SetVersionTemplate(\u0026#34;{{.Version}}\\n\u0026#34;) } The version template is overridden in order to print just the version (when using the --version flag), thus allowing easier parsing of the version by other programs.\nVersion Command # I like to include a custom version sub-command that can include more information such as commit hash and platform when using the --verbose/-v flag.\npackage commands import ( \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; \u0026#34;github.com/spf13/cobra\u0026#34; ) var ( Hash = \u0026#34;development\u0026#34; verbose bool versionCommand = \u0026amp;cobra.Command{ Use: \u0026#34;version\u0026#34;, Short: \u0026#34;print version\u0026#34;, Long: \u0026#34;print version\u0026#34;, Run: func(cmd *cobra.Command, args []string) { if verbose { if Version != \u0026#34;development\u0026#34; { fmt.Printf(\u0026#34;version: \\t%s\\n\u0026#34;, Version) } if Hash != \u0026#34;development\u0026#34; { fmt.Printf(\u0026#34;commit: \\t%s\\n\u0026#34;, Hash) } fmt.Printf(\u0026#34;compiler: \\t%s (%s)\\n\u0026#34;, runtime.Version(), runtime.Compiler) fmt.Printf(\u0026#34;platform: \\t%s/%s\\n\u0026#34;, runtime.GOOS, runtime.GOARCH) } else { fmt.Println(Version) } }, } ) func init() { versionCommand.Flags().BoolVarP(\u0026amp;verbose, \u0026#34;verbose\u0026#34;, \u0026#34;v\u0026#34;, false, \u0026#34;version, git commit hash, compiler version \u0026amp; platform\u0026#34;) ParentCommand.AddCommand(versionCommand) } If you want to inject release-specific values to Go\u0026rsquo;s global memory during build time, I wrote about using GoReleaser for this purpose, and how I integrate it to my continuous integration pipeline.\nChild-level Commands # Some CLIs (such as git) require multiple sub-commands, each with different functionality in order to maintain usability. This can be achieved by initialising a new cobra.Command object and registering as a sub-command to its parent in an init function. In addition, flags that accept more complex data types (such as duration) can be integrated with a given command by binding it to a variable (ideally in the same init function mentioned above).\nimport \u0026#34;github.com/spf13/cobra\u0026#34; var ( duration time.Duration childCommand = cobra.Command{ Use: \u0026#34;child\u0026#34;, Short: \u0026#34;child command\u0026#34;, Long: \u0026#34;child command\u0026#34;, // ... } ) func init() { childCommand.Flags().DurationVarP(\u0026amp;duration, \u0026#34;duration\u0026#34;, \u0026#34;d\u0026#34;, 0, \u0026#34;duration with units ns, us (or µs), ms, s, m, h\u0026#34;) ParentCommand.AddCommand(\u0026amp;childCommand) } Execution # In order to parse and execute any Cobra command or its children, it can be executed in any stage of the program\u0026rsquo;s runtime. Most CLI-type application would execute their root-level command directly from the main function. For a clearer user experience, a the execution function of a command prints the error to standard output (if it\u0026rsquo;s non-nil) before returning it to be examined and to be dealt with.\npackage main import \u0026#34;os\u0026#34; func main() { if err := ParentCommand.Execute(); err != nil { os.Exit(1) } } Additional Resources # Before building and packaging the CLI, I tend to run the following commands and append their output to a text files, which are automatically packaged with the binary later in the continuous integration process.\nManual Page # With Christian Muehlhaeuser\u0026rsquo;s mango library, a user manual page can be generated for a Cobra command and all of its child commands. I tend to this by defining a new cobra.Command object that reads the root command and uses the above-mentioned library to print the manual page to standard output (which can be tested by piping the output to man -l -).\npackage commands import ( \u0026#34;fmt\u0026#34; mango \u0026#34;github.com/muesli/mango-cobra\u0026#34; \u0026#34;github.com/muesli/roff\u0026#34; \u0026#34;github.com/spf13/cobra\u0026#34; ) var manualCommand = \u0026amp;cobra.Command{ Use: \u0026#34;manual\u0026#34;, Short: \u0026#34;print manual page\u0026#34;, Long: \u0026#34;print manual page to standard output\u0026#34;, RunE: func(cmd *cobra.Command, args []string) error { manualPage, err := mango.NewManPage(1, ParentCommand) if err != nil { return err } manualPage.WithSection(\u0026#34;Bugs\u0026#34;, fmt.Sprintf(\u0026#34;Please report bugs to our GitHub page https://github.com/AppleGamer22/%s/issues\u0026#34;, manualPage.Root.Name)) manualPage.WithSection(\u0026#34;Authors\u0026#34;, \u0026#34;Omri Bornstein \u0026lt;omribor@gmail.com\u0026gt;\u0026#34;) manualPage.WithSection(\u0026#34;Copyright\u0026#34;, `cocainate is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version. cocainate is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.`) _, err = fmt.Println(manualPage.Build(roff.NewDocument())) return err }, } func init() { RootCommand.AddCommand(manualCommand) } Shell Completion Scripts # Cobra also ships with a completion sub-command for generating completion scripts for bash, zsh, fish and PowerShell, which enables the user to discover and understand your CLI more quickly.\n","date":"2023-02-25","permalink":"/posts/go/cobra/","section":"Posts","summary":"CLIs in Go with Cobra","title":"CLIs in Go with Cobra"},{"content":"For many projects, additional configuration is required in order to ensure correct behaviour. Whether its JSON Web Token secrets, database/personal credentials or other customisable settings, reliable and flexible configuration schemes are dependent upon during all stages of software development. In this document, I\u0026rsquo;ll demonstrate how I use Steve Francia\u0026rsquo;s viper library, which enables the interchangeable usage of environment variable and a configuration file for the same Go program.\nFor the purposes of simplicity, I assume that all of the code snippets shown here are part of the main package. However, I recommend authors of large codebases to employ a multi-package taxonomy, such that their code is more organised and maintainable.\nData Structure # In order to parse and validate the current environment settings, Viper requires a data structure that describes all the properties you require. I usually parse/serialise and validate the current state (as set at during start-up) into a data structure in the main function.\ntype Configuration struct { Secret string URI string Database string Storage string Directories bool Port uint } By default, Viper supports parsing/serialising a YAML file (or other common formats of your choice) that matches the data structure semantics:\nsecret: your_secret uri: \u0026#34;mongodb://localhost:27017\u0026#34; database: mongo storage: . directories: false port: 4100 Default Values # The variable that stores the parsed/serialised state of the settings can be initialised with default values that correspond to unset fields. These default values should be clearly documented to users in order to reduce potential friction that might arise with configuring an unfamiliar program.\nvar configuration = Configuration{ URI: \u0026#34;mongodb://localhost:27017\u0026#34;, Database: \u0026#34;mongo\u0026#34;, Storage: \u0026#34;.\u0026#34;, Directories: false, Port: 4100, } Initialising Viper # I like to include the Viper initialisation code in an init function in the main package or in a package that is loaded by it, such that non-changing behaviour is set before the main function runs.\nimport \u0026#34;github.com/spf13/viper\u0026#34; func init() { // ... // optional environment variable name prefix viper.SetEnvPrefix(\u0026#34;raker\u0026#34;) // enabling the use of environment variables within viper viper.AutomaticEnv() // Setting name and file type for configuration file viper.SetConfigName(\u0026#34;.raker\u0026#34;) viper.SetConfigType(\u0026#34;yaml\u0026#34;) viper.AddConfigPath(\u0026#34;.\u0026#34;) // ... } Environment Variables # From my experience, Viper can handle environment variables whose names maintain common practices while keeping the parsing/serialising code at minimum by explicitly binding variable names to Viper internal storage. In addition, since environment variables are an in-memory key-value store accessible by the shell and the running process, they cannot be mapped easily to a tree data structure implicitly. This means nested data structure properties must be explicitly bound to an environment variable using the same method.\nimport ( \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spf13/viper\u0026#34; ) func init() { // ... viper.BindEnv(\u0026#34;SECRET\u0026#34;) viper.BindEnv(\u0026#34;URI\u0026#34;) viper.BindEnv(\u0026#34;DATABASE\u0026#34;) viper.BindEnv(\u0026#34;STORAGE\u0026#34;) viper.BindEnv(\u0026#34;DIRECTORIES\u0026#34;) viper.BindEnv(\u0026#34;PORT\u0026#34;) /* properties of nested structures can be set via environment variables by providing their before the to-be-bound environment variable\u0026#39;s name */ viper.BindEnv(\u0026#34;parent.child\u0026#34;, \u0026#34;ENV_VAR\u0026#34;) // ... } Invalid Values # Viper\u0026rsquo;s parsing/serialising function supports type mismatches between the expected data structure and the inspected configuration state. However invalid values with values with valid types should be checked for after successful parsing/serialising. It might be possible to offload most of this validation to Viper by utilising its dependency\u0026rsquo;s custom data structure tags, but I haven\u0026rsquo;t looked into it yet.\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/spf13/viper\u0026#34; ) func main() { // ... if err1 := viper.ReadInConfig(); err1 != nil { // configuration file not found errors should be handled differently for each application if _, err := os.Stat(\u0026#34;/.dockerenv\u0026#34;); err != nil { /* if running in a Docker container, a missing configuration might prevent correct behaviour (depending on core functionality and lack of environment variable usage) */ log.Println(err1) } } if err := viper.Unmarshal(\u0026amp;configuration); err != nil { log.Fatal(err) } // checking for invalid empty strings for JWT secret if configuration.Secret == \u0026#34;\u0026#34; \u0026amp;\u0026amp; !viper.IsSet(\u0026#34;secret\u0026#34;) { log.Fatal(\u0026#34;A JWT secret must be set via a config file or an environment variable\u0026#34;) } // ... } ","date":"2023-02-25","permalink":"/posts/go/viper/","section":"Posts","summary":"Environment Settings in Go with Viper","title":"Environment Settings in Go with Viper"},{"content":"Shutting servers gracefully is beneficial for maintaining data integrity in relations to modifying file system data or database entries such that the server isn\u0026rsquo;t shutdown in the middle of a transaction. In this document, I show how I set-up a Go-based HTTP server to shutdown gracefully upon an interruption signal.\nFor the purposes of simplicity, I assume that all of the code snippets shown here are part of the main package. However, I recommend authors of large codebases to employ a multi-package taxonomy, such that their code is more organised and maintainable.\nRequired Packages # context for restricting the amount the server had to shutdown gracefully. errors for checking the error type in the case of a server crush. fmt for printing a \\r to the console in order to not show ^C when sending interrupting the server. net/http for initialising and configuring an HTTP server. os and syscall for accessing interruption signal codes specific to the process\u0026rsquo; operating system. os/signal for overriding the default behaviour of the program when an interruption signal is received. import ( \u0026#34;context\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/signal\u0026#34; \u0026#34;syscall\u0026#34; ) Server # Go\u0026rsquo;s HTTP Library requires a custom http.Server object because the net/http package doesn\u0026rsquo;t provide a shutdown method for the globally available default server object. An http.ServeMux multiplexer object can be used as the server\u0026rsquo;s Handler property and further customise it\u0026rsquo;s HTTP scheme.\nmux := http.NewServeMux() // ... configure routes server := http.Server{ Addr: \u0026#34;:8080\u0026#34;, Handler: mux, } Signal Channel Override # In order to override the process\u0026rsquo; interruption behaviour, a signal channel should be created such that incoming signals can be processed before the operating system takes over.\nsignals := make(chan os.Signal, 1) signal.Notify(signals, os.Interrupt) Threads # Multiple threads are required in order to both run the server and wait for the interruption signal. In this case, the server run concurrently to the main thread that waits for an interruption signal.\nServer # Normally, when you type Control+C the main thread and its HTTP server are shutdown non-gracefully by the operating system, which can lead to data loss/corruption. However in the following example, the server\u0026rsquo;s thread runs the HTTP server (in parallel to the main thread) and listens for network requests until stopped, which makes it a blocking operation. If the server crushes, an interrupt signal is sent the the channel such that the program can exit as fast as possible in order to not waste any more computational resources.\ngo func() { if err := server.ListenAndServe(); err != nil \u0026amp;\u0026amp; !errors.Is(err, http.ErrServerClosed) { log.Println(err) signals \u0026lt;- os.Interrupt } }() Main # While the server runs on a separate thread, the main thread listens for incoming interruption signals, and uses the build-in graceful Shutdown method when such a signal is received. If the graceful shutdown failed to execute correctly, the program panics in order to fulfil the interruption request as soon as possible.\n\u0026lt;-signals // optional: clear line in order to hide ^C fmt.Print(\u0026#34;\\r\u0026#34;) log.Println(\u0026#34;shutting down server...\u0026#34;) // context.WithTimeout(context.Background(), 5 * time.Second) can be used for a 5s time limit if err := server.Shutdown(context.Background()); err != nil { panic(err) } ","date":"2023-02-24","permalink":"/posts/go/graceful_server_shutdown/","section":"Posts","summary":"Graceful Server Shutdown in Go","title":"Graceful Server Shutdown in Go"},{"content":"This document summarises how I set-up GoReleaser Continuous Integration/Deployment (CI/CD) for my Go (Programming Language) projects, such that I have a portable configuration for compilation, packaging and releasing settings. This is especially useful for projects that ship a software package with several files and need a portable way to define how it should be built/packaged based on operating system, processor architecture and environment (development, testing or production).\nPre-requisites # Software # go command-line interface for the Go programming language git version control system goreleaser command-line interface docker container build system syft Software Bill of Materials generator Online Accounts # GitHub or GitLab A remote Git repository for the source code A remote repository for the Homebrew Tap with a separate access token1 2 with sufficient permissions. Docker Hub An access token with sufficient permissions. Arch User Repository A public-private SSH key pair Global Hooks # GoReleaser supports a list of commands that should be run in order before every other task in the build process. I use this feature to automatically generate user manuals and command completion scripts for most of my projects with a command-line interface.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json project_name: {{.ProjectName}} before: hooks: - make completion manual The Makefile used to define the commands to generate the shell completion scripts and user manuals is listed below. The Cobra library for Go is used to set-up the CLI and the shell completion generation, and Mango is used to generate a user manual from the object-oriented definitions of the commands.\n.PHONY: completion manual # assuming the current module has a main function that calls Cobra completion: go run . completion bash \u0026gt; cocainate.bash go run . completion fish \u0026gt; cocainate.fish go run . completion zsh \u0026gt; cocainate.zsh go run . completion powershell \u0026gt; cocainate.ps1 # assuming a manual command (that prints the user manual page) exists manual: # test with `go run . manual | man -l -` go run . manual \u0026gt; cocainate.1 Builds # The Go compiler supports defining compilation parameters such as:\nRoot-level package, which is usually where the main function is. Oerating system (via the GOOS environment variable) and processor architecture (via the GOARCH environment variable) for compilation target. Linker toggles (via -ldflags in the go build command), which I mainly use to set the constants that store the program\u0026rsquo;s version and commit hash, such the correct values are set for each build. Depending on the complexity of the build process, it might be easier to define these parameters in a .goreleaser.yml file than writing a less maintainable shell script. The portability of GoReleaser really shines when its its templating system used, which makes it easier to grab relevant metadata variables during the build process.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json builds: - id: linux goos: - linux goarch: - amd64 - arm64 - riscv64 ldflags: - \u0026#34;-X \u0026#39;github.com/AppleGamer22/{{.ProjectName}}/commands.Version={{.Version}}\u0026#39;\u0026#34; - \u0026#34;-X \u0026#39;github.com/AppleGamer22/{{.ProjectName}}/commands.Hash={{.FullCommit}}\u0026#39;\u0026#34; # variables defined in the main package don\u0026#39;t require their module + package path as a prefix - \u0026#34;-X \u0026#39;main.Production={{.Version}}\u0026#39;\u0026#34; - id: mac # a specific sub-directory for your .go files can be specified dir: cli # a specific sub-directory for your main Go package can specified main: ./cli goos: - darwin goarch: - amd64 - arm64 Archive Packages # After the builds are complete, each of them can be referenced to be packaged differently. In the following example, Linux and macOS builds are to packaged as a gzip archive (due to its availability in these environment), along with command completion scripts for command-line shells that usually ship with these environments. On the other hand, Windows doesn\u0026rsquo;t normally ship the same archive format compatibility, which is why it is packaged using zip, along a PowerShell completion script. I also like to define the template for the archive, such that it includes the project name, package version, operating system and processor architecture. For better clarity for macOS users, I like to utilise the name template for the package in order to substitute the substring darwin (the name of macOS\u0026rsquo;s kernel) with mac.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json archives: - id: unix builds: - linux - mac name_template: \u0026gt;- {{- .ProjectName}}_ {{- .Version}}_ {{- if eq .Os \u0026#34;darwin\u0026#34;}}mac{{else}} {{- .Os}} {{- end}}_ {{- .Arch}} files: - \u0026#34;{{.ProjectName}}.*sh\u0026#34; - \u0026#34;{{.ProjectName}}.1\u0026#34; - id: windows builds: - windows format_overrides: - goos: windows format: zip name_template: \u0026#34;{{.ProjectName}}_{{.Version}}_{{.Os}}_{{.Arch}}\u0026#34; files: - \u0026#34;{{.ProjectName}}.ps1\u0026#34; Linux Packages # GoReleaser also integrate its in-house Linux packager directly into the .goreleaser.yml configuration file. This can be used to produce native packages for Alpine-based, Debian-based, RHEL-based and Arch-based Linux distributions from a Go binary. For maximum utility, additional files (and where they should be installed) and dependencies can also be defined.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json nfpms: - vendor: AppleGamer22 maintainer: Omri Bornstein \u0026lt;omribor@gmail.com\u0026gt; homepage: https://github.com/AppleGamer22/{{.ProjectName}} license: GPL-3.0 description: a description file_name_template: \u0026#34;{{.ProjectName}}_{{.Version}}_{{.Os}}_{{.Arch}}\u0026#34; builds: - linux dependencies: # if the distribution names a dependency\u0026#39;s package differently, an additional separate nfpms entry would be required - dbus formats: - apk - deb - rpm - archlinux contents: - src: \u0026#34;{{.ProjectName}}.1\u0026#34; dst: /usr/share/man/man1/{{.ProjectName}}.1 - src: \u0026#34;{{.ProjectName}}.bash\u0026#34; dst: /usr/share/bash-completion/completions/{{.ProjectName}} - src: \u0026#34;{{.ProjectName}}.fish\u0026#34; dst: /usr/share/fish/completions/{{.ProjectName}}.fish - src: \u0026#34;{{.ProjectName}}.zsh\u0026#34; dst: /usr/share/zsh/site-functions/_{{.ProjectName}} Checksums # In order to help users verify (cryptographically) the integrity of the software they just downloaded, a checksum file can be made to have the SHA-256 hash value of selected files. In this example I just left most settings as their default, and added the completion scripts and user manual as extra files to be reflected in the checksum.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json checksum: extra_files: - glob: \u0026#34;{{.ProjectName}}.*sh\u0026#34; - glob: \u0026#34;{{.ProjectName}}.*1\u0026#34; Changelog # If you find it tedious to manually write a changelog for your latest release by reading all of the relevant code commits (and their already-written description and metadata), and compiling a detailed changelog, GoReleaser has got you covered. Assuming the commit messages are well-formatted and descriptive, GoReleaser can compile a neat changelog for you, with commits sorted into groups, and accompanying metadata for each commit. It\u0026rsquo;s worth taking in mind that this won\u0026rsquo;t work as well for unformatted existing commits, and that in order for GoReleaser to sort your future commit messages into groups, they should have a consistent format.\nThe grouping rules for the changelog are defined by regular expression patterns for the commit messages, such that certain commits are included or excluded from the changelog. I like to define these rules based on a keyword prefix, such as feat: for feature commits or fix: for bug fixes.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json changelog: use: github filters: exclude: - \u0026#39;^docs:\u0026#39; - \u0026#39;^test:\u0026#39; - \u0026#39;^chore:\u0026#39; - typo - Merge pull request - Merge remote-tracking branch - Merge branch - go mod tidy groups: - title: \u0026#39;New Features\u0026#39; regexp: \u0026#34;^.*feat[(\\\\w)]*:+.*$\u0026#34; order: 0 - title: \u0026#39;Bug fixes\u0026#39; regexp: \u0026#34;^.*fix[(\\\\w)]*:+.*$\u0026#34; order: 10 - title: Other work order: 999 Release # When GoReleaser is run with a current and tagged commit, it can upload the files it generated in the build and archive process to a various distribution platforms such as GitHub and GitLab.\nGitHub # As far as I have been able to check in the documentation, the GitHub username and repository names cannot be used with the above-mentioned templating system, which means these parameters should be declared explicitly. The following configuration also creates a new GitHub Discussions thread after the release has been successfully published to GitHub.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json release: # no templates available github: owner: AppleGamer22 name: cocainate discussion_category_name: General prerelease: auto footer: | ## Installation ### Arch Linux Distributions * [`yay`](https://github.com/Jguer/yay): ```bash yay -S {{.ProjectName}}-bin ``` * [`paru`](https://github.com/morganamilo/paru): ```bash paru -S {{.ProjectName}}-bin ``` ### macOS * [Homebrew Tap](https://github.com/AppleGamer22/homebrew-{{.ProjectName}}): ```bash brew install AppleGamer22/tap/{{.ProjectName}} ``` Arch User Repository # The AUR is repository with a wide range of installation scripts that are not available in the official Arch Linux distribution through the official package manager. After releasing to GitHub or GitLab, your custom installation script can be uploaded to the AUR, thus allowing Arch Linux user of yay or paru to get your software more easily.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json aurs: # no templates available - homepage: https://github.com/AppleGamer22/cocainate description: description license: GPL3 maintainers: - Omri Bornstein \u0026lt;omribor@gmail.com\u0026gt; contributors: - Omri Bornstein \u0026lt;omribor@gmail.com\u0026gt; private_key: \u0026#34;{{.Env.AUR_SSH_PRIVATE_KEY}}\u0026#34; # no templates available git_url: ssh://aur@aur.archlinux.org/cocainate-bin.git depends: - dbus optdepends: - bash - fish - zsh # no templates available package: |- install -Dm755 cocainate \u0026#34;${pkgdir}/usr/bin/cocainate\u0026#34; install -Dm644 cocainate.1 \u0026#34;${pkgdir}/usr/share/man/man1/cocainate.1\u0026#34; install -Dm644 cocainate.bash \u0026#34;${pkgdir}/usr/share/bash-completion/completions/cocainate\u0026#34; install -Dm644 cocainate.fish \u0026#34;${pkgdir}/usr/share/fish/vendor_completions.d/cocainate.fish\u0026#34; install -Dm644 cocainate.zsh \u0026#34;${pkgdir}/usr/share/zsh/site-functions/_cocainate\u0026#34; commit_author: name: Omri Bornstein email: omribor@gmail.com Homebrew Tap # Homebrew is a popular package repository among macOS users, which allows the additions of third-party repositories, colloquially known as Taps. Similarly to the AUR, tap repositories host installation scripts that the brew CLI can understand. After releasing to GitHub or GitLab, your custom installation script can be uploaded to your tab repository on GitHub.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json brews: - tap: owner: AppleGamer22 name: homebrew-tap token: \u0026#34;{{.Env.TAP_GITHUB_TOKEN}}\u0026#34; download_strategy: CurlDownloadStrategy commit_author: name: Omri Bornstein email: omribor@gmail.com homepage: https://github.com/AppleGamer22/cocainate description: description license: GPL-3.0 install: | bin.install \u0026#34;cocainate\u0026#34; man1.install \u0026#34;cocainate.1\u0026#34; bash_completion.install \u0026#34;cocainate.bash\u0026#34; =\u0026gt; \u0026#34;cocainate\u0026#34; fish_completion.install \u0026#34;cocainate.fish\u0026#34; zsh_completion.install \u0026#34;cocainate.zsh\u0026#34; =\u0026gt; \u0026#34;_cocainate\u0026#34; Container Images # A lot of projects written in Go are meant to run as a server with corresponding TCP or UDP port(s), and the standard for packaging such software is the Open Container Initiative (OCI). If you have never heard of this standard, you might have heard of Docker, which is the first implementation of this standard\u0026rsquo;s specification. Configuring GoReleaser to build/publish OCI-compliant container images allows easier multi-registry publishing, multi-platform builds, and injecting environment variables to linker flags.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json dockers: - use: buildx image_templates: # Docker Hub - \u0026#34;docker.io/applegamer22/{{.ProjectName}}:{{.Version}}\u0026#34; - \u0026#34;docker.io/applegamer22/{{.ProjectName}}:latest\u0026#34; # GitHub Container Registry - \u0026#34;ghcr.io/applegamer22/{{.ProjectName}}:{{.Version}}\u0026#34; - \u0026#34;ghcr.io/applegamer22/{{.ProjectName}}:latest\u0026#34; build_flag_templates: - \u0026#34;--pull\u0026#34; - \u0026#34;--platform=linux/amd64,linux/arm64\u0026#34; - \u0026#34;--label=org.opencontainers.image.created={{.Date}}\u0026#34; - \u0026#34;--label=org.opencontainers.image.title={{.ProjectName}}\u0026#34; - \u0026#34;--label=org.opencontainers.image.revision={{.FullCommit}}\u0026#34; - \u0026#34;--label=org.opencontainers.image.version={{.Version}}\u0026#34; # imitating linker flags - \u0026#34;--build-arg VERSION={{.Version}}\u0026#34; - \u0026#34;--build-arg HASH={{.FullCommit}}\u0026#34; extra_files: - templates - assets Software Bill of Materials # In order to allow easier automated security analysis by third-parties, GoReleaser can create a Software Bill of Materials (SBoM) for other people to analyse and potentially find issues your software\u0026rsquo;s dependencies more easily. In the following example, a separate SBoM for each package binary (and the source code) is made, and uploaded to your preferred publishing channel.\nsyft is required as a dependency of GoReleaser for this feature to work.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json sboms: - artifacts: source - artifacts: package - artifacts: archive - artifacts: binary Debugging # Since debugging continuos integration configurations purely by running your CI workflow repeatedly is very exhausting, the goreleaser CLI is available to be run on your preferred environment. In addition, most of this commands can be easily integrated into an existing Makefile-based workflow.\ngoreleaser check is useful for validating your configuration\u0026rsquo;s syntax. goreleaser build is useful for building the binaries for later inspection. goreleaser release is used to build, package and release the artifacts. The --skip-publish flag is useful for inspecting the packages without publishing. The --snapshot flag is useful for ignoring the version tag. The --clean flag is useful for cleaning-up the filesystem after publishing the artifacts. Continuous Integration # Since GoReleaser is published as a CLI, its highly-programmable nature allows easy integration into custom automated workflows.\nGitHub Actions # I use GoReleaser GitHub Actions integration to build, package and release my open-source projects automatically after a stable semantic version git tag is pushed to GitHub. The above-mentioned access tokens are injected into the appropriate workflow steps as workflow secrets.\n# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json name: Release on: push: tags: - \u0026#39;v*\u0026#39; - \u0026#39;!*alpha*\u0026#39; - \u0026#39;!*beta*\u0026#39; - \u0026#39;!*rc*\u0026#39; permissions: contents: write packages: write jobs: github_release: runs-on: ubuntu-latest steps: - name: Pull Source Code uses: actions/checkout@v3 with: fetch-depth: 0 - name: Fetch All Tags run: git fetch --force --tags - name: Set-up Go uses: actions/setup-go@v3 with: go-version: stable - name: Set-up QEMU uses: docker/setup-qemu-action@v2.1.0 - name: Set-up Docker BuildX uses: docker/setup-buildx-action@v2.4.1 - name: Sign-in to Docker Container Registry uses: docker/login-action@v2 with: username: ${{secrets.DOCKER_USERNAME}} password: ${{secrets.DOCKER_TOKEN}} - name: Set-up Syft uses: anchore/sbom-action/download-syft@v0.13.3 - name: Build, Package \u0026amp; Distribute uses: goreleaser/goreleaser-action@v4 with: version: latest args: release --clean env: GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}} TAP_GITHUB_TOKEN: ${{secrets.TAP_GITHUB_TOKEN}} AUR_SSH_PRIVATE_KEY: ${{secrets.AUR_SSH_PRIVATE_KEY}} GitHub Access Token: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nGitLab Access Token: https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-02-19","permalink":"/posts/go/goreleaser/","section":"Posts","summary":"Go (Programming Language) Continuous Integration with GoReleaser","title":"Continuous Integration with GoReleaser"},{"content":"","date":"2023-02-19","permalink":"https://monsec.io/posts/2023s1/\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"MonSec 2023 Semester 1 \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/sbom/","section":"Tags","summary":"","title":"SBoM"},{"content":"My Monash Cyber Security Club (MonSec) talks/presentations/workshops and blog posts are listed here:\n","date":null,"permalink":"/talks/monsec/","section":"Talks \u0026 Publications","summary":"My MonSec talks/presentations/workshops and blog posts...","title":"Monash Cyber Security Club (MonSec)"},{"content":"Background # This problem was found in my command-line interface (CLI) screensaver inhibitor project, named cocainate and written in Go. The screensaver inhibitor can wait for either a termination signal, or for an optionally-provided duration. The screensaver inhibitor\u0026rsquo;s session is tracked by a data structure with the specified duration, and a termination signals channel, linked to the process\u0026rsquo; signal buffer.\ns := Session{ Duration: duration, Signals: make(chan os.Signal, 1), } signal.Notify(s.Signals, os.Interrupt, syscall.SIGTERM, syscall.SIGQUIT) The part of the code shown below is how I used to implement the CLI functionality that waits for either:\na timer (with user-specified duration) to end. This is triggered by a time.Time object sent to the channel returned by the time.After function, which occurs after the duration specified in the function\u0026rsquo;s input, or for the user to manually stop the screensaver inhibitor. This is triggered by a channel that listens for terminations signals sent to the programs by either the operating system, or the user via the command-line shell. select { case \u0026lt;-time.After(s.Duration): case \u0026lt;-s.Signals: } Potential Channel Leaks # The issue starts when the user terminates the screen inhibitor session before the timer (with the duration specified in the CLI\u0026rsquo;s arguments) ends. According to the documentation of time.After1:\nAfter waits for the duration to elapse and then sends the current time on the returned channel. It is equivalent to NewTimer(d).C. The underlying Timer is not recovered by the garbage collector until the timer fires. If efficiency is a concern, use NewTimer instead and call Timer.Stop if the timer is no longer needed.\n%%{init: {\u0026#34;sequence\u0026#34;: {\u0026#34;mirrorActors\u0026#34;: false}}}%% sequenceDiagram participant CLI actor User participant Timer par CLI to User loop CLI-\u0026gt;\u0026gt;User: check for termination signal activate User end User-\u0026gt;\u0026gt;CLI: terminate session deactivate User Note over User,Timer: Timer\u0026#39;s channel still exists and CLI to Timer loop CLI-\u0026gt;\u0026gt;Timer: check for duration end signal end end Therefore, in this case, if the user sends a termination signal, the timer\u0026rsquo;s channel continues to exists in the heap until its duration is over, because it\u0026rsquo;s not stopped manually. Over the course of time between the receiving of the termination signal to the end of the timer\u0026rsquo;s duration, the timer\u0026rsquo;s channel is still accessible despite no longer being read by the program, which constitutes a memory leak2, which may lead to performance and reliability issues. I should also note that this is an issue only when cocainate\u0026rsquo;s code is imported as a Go module3 to other codebases that don\u0026rsquo;t immediately terminate the entire process upon receiving a termination signal.\nHow I Fixed It # In this commit (shown below), I use a a complete time.Timer object rather than just its channel (as advised by Go\u0026rsquo;s standard library documentation), which allows me to close its channel after a termination signal is received. Since now the timer\u0026rsquo;s channel is closed when it\u0026rsquo;s no longer necessary, it allows Go\u0026rsquo;s garbage collector to clean it sooner, thus preventing the memory leak and the problems it can cause down the line.\ntimer := time.NewTimer(s.Duration) select { case \u0026lt;-timer.C: case \u0026lt;-s.Signals: timer.Stop() } time.After\u0026rsquo;s Function Documentation (https://pkg.go.dev/time#After)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nMemory Leak Wikipedia article (https://en.wikipedia.org/wiki/Memory_leak)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBui-Palsulich, T., \u0026amp; Compton, E. (2019, March 19). Using Go Modules. The Go Programming Language Blog. https://go.dev/blog/using-go-modules\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-01-14","permalink":"/posts/go/a_randomly-timed_memory_leak/","section":"Posts","summary":"A randomly-timed memory leak I found in my Go project (a CLI named cocainate), and how I fixed it...","title":"A Randomly-Timed Memory Leak"},{"content":"","date":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"forensics"},{"content":"","date":null,"permalink":"/tags/nitectf/","section":"Tags","summary":"","title":"niteCTF"},{"content":"","date":null,"permalink":"/posts/nitectf/","section":"Posts","summary":"niteCTF solutions","title":"niteCTF"},{"content":"Prompt # The new Head of Crime Analytics is named - The Deep. The Deep addresses the Crime team and Cassandra brings cupcakes for the team. They fired most of the staff because of past tweets that were critical of Homelander. Homelander as paranoid as ever believes that the boys has yet another plan to take down Vought International. As one of the members from the few left behind it is upon your shoulders to crack down on the boys\u0026rsquo; plan to take down Vought by looking into the suspicious GitHub user who goes by the name sk1nnywh1t3k1d or face Homelander\u0026rsquo;s wrath.\nSolution # GitHub # The GitHub profile can be found at https://github.com/sk1nnywh1t3k1d. This GitHub user has only one repository with only 2 commits at https://github.com/sk1nnywh1t3k1d/chat-app. The first commit added a file named chat.txt that was deleted on the second commit at https://github.com/sk1nnywh1t3k1d/chat-app/commit/d830e9b9a9cd531b2677bad94b4a08d7a539738b#diff-d341c91ed9aff89bf6ea2d5fa7b245307f745a1e9374328e47c79f1529be627a. The commit also has author\u0026rsquo;s the email (hughiecampbell392@gmail.com), visible when viewing the verbose commit patch, by appending .patch to the commit URL. The chat.txt file mention the shortened URL https://bit.ly/voughtencrypted WAV # The previously-mentioned shortened URL leads to an audio file download: When the audio file is shown in Audacity\u0026rsquo;s Spectrogram, the following text (thguovdne hsals drawrof yl tod tib) can be seen: By reversing the message, the shortened URL (https://bit.ly/endvought) can be read:\n$ echo \u0026#34;thguovdne hsals drawrof yl tod tib\u0026#34; | rev bit dot ly forward slash endvought PNG # The previously-mentioned shortened URL leads to an image file download: The shredded red text looks like an email address, but since the email address looks like the one found in the commit metadata, I didn\u0026rsquo;t un-shred the picture. During the event, I had not idea how to continue from here, with the email address in hand. E-mail Address # I didn\u0026rsquo;t figure it out during the event, but once I had Hughie\u0026rsquo;s email address I could find his public Google calendar with the hyper link calendar.google.com/calendar/u/0/embed?src=hughiecampbell392@gmail.com. Additional intelligence could be gathered about the email address using tools such as EPIEOS. The Google ID of the email address could be gathered by initiating a Google Hangouts chat and inspecting the HTML at the recipient\u0026rsquo;s details. The only event during December 2022 has the flag niteCTF{v0ught_n33ds_t0_g0_d0wn}. ","date":"2022-12-24","permalink":"/posts/nitectf/boys/","section":"Posts","summary":"niteCTF 2022 Boys challenge","title":"niteCTF Boys"},{"content":"","date":null,"permalink":"/tags/osint/","section":"Tags","summary":"","title":"OSINT"},{"content":"","date":null,"permalink":"/tags/sudoku/","section":"Tags","summary":"","title":"Sudoku"},{"content":"Prompt # Determine if a $9 \\times 9$ Sudoku board is valid. All of the cells need to be validated according to the following rules:\nEach row must contain each of the digits 1 to 9 exactly once. Each column must contain each of the digits 1 to 9 exactly once. Each of the nine $3 \\times 3$ sub-boxes of the grid must contain each of the digits 1 to 9 exactly once. Example Input # For example, the following matrix1 $M$ is a valid Sudoku solution:\n$$ M = \\left[\\begin{array}{ccc|ccc|ccc} 5 \u0026amp; 3 \u0026amp; 4 \u0026amp; 6 \u0026amp; 7 \u0026amp; 8 \u0026amp; 9 \u0026amp; 1 \u0026amp; 2 \\ 6 \u0026amp; 7 \u0026amp; 2 \u0026amp; 1 \u0026amp; 9 \u0026amp; 5 \u0026amp; 3 \u0026amp; 4 \u0026amp; 8 \\ 1 \u0026amp; 9 \u0026amp; 8 \u0026amp; 3 \u0026amp; 4 \u0026amp; 2 \u0026amp; 5 \u0026amp; 6 \u0026amp; 7 \\ \\hline 8 \u0026amp; 5 \u0026amp; 9 \u0026amp; 7 \u0026amp; 6 \u0026amp; 1 \u0026amp; 4 \u0026amp; 2 \u0026amp; 3 \\ 4 \u0026amp; 2 \u0026amp; 6 \u0026amp; 8 \u0026amp; 5 \u0026amp; 3 \u0026amp; 7 \u0026amp; 9 \u0026amp; 1 \\ 7 \u0026amp; 1 \u0026amp; 3 \u0026amp; 9 \u0026amp; 2 \u0026amp; 4 \u0026amp; 8 \u0026amp; 5 \u0026amp; 6 \\ \\hline 9 \u0026amp; 6 \u0026amp; 1 \u0026amp; 5 \u0026amp; 3 \u0026amp; 7 \u0026amp; 2 \u0026amp; 8 \u0026amp; 4 \\ 2 \u0026amp; 8 \u0026amp; 7 \u0026amp; 4 \u0026amp; 1 \u0026amp; 9 \u0026amp; 6 \u0026amp; 3 \u0026amp; 5 \\ 3 \u0026amp; 4 \u0026amp; 5 \u0026amp; 2 \u0026amp; 8 \u0026amp; 6 \u0026amp; 1 \u0026amp; 7 \u0026amp; 9 \\end{array}\\right] $$\nSolution # During the interview, I thought I understood the rules of Sudoku, but in actuality I didn\u0026rsquo;t understand the fact that there are only 9 sub-boxes defined in Sudoku, so I implemented the check for every possible $3 \\times 3$ sub-matrix. The following implementation is an improvement since it actually takes into account the rules of the game.\nRows \u0026amp; Columns # For every $0 \\leq i \u0026lt; 9$, a row and column count arrays are maintained, such that the row array counts the number of times each digit appears in $(i, j)$, and the column array counts the number of times each digit appears in $(j, i)$, where $0 \\leq j \u0026lt; 9$. After each time the count arrays was updated for $j = 8$, they are iterated through to check for any counts that are not strictly 1.\nSub-boxes # For every $0 \\leq i \u0026lt; 9$ (such that $i \\equiv 1\\ (\\bmod\\ 3)$), and every $0 \\leq j \u0026lt; 9$ (such that $j \\equiv 1\\ (\\bmod\\ 3)$), the matrix coordinate $(i, j)$ is the upper-left corner of a given $3 \\times 3$ Sudoku sub-box. A count array is maintained for every sub-box $(i, j)$ with coordinate $(y, x)$, such that $j \\leq y \u0026lt; j + 3$, and such that $i \\leq x \u0026lt; i + 3$. After all values of the coordinates in the $3 \\times 3$ sub-box with upper-left corner $(i, j)$ have been recorded in the count array, it\u0026rsquo;s iterated through to check for any counts that are not strictly 1.\nGo Implementation # func CheckSudoku(matrix [9][9]int) bool { // check row and column conditions for i := 0; i \u0026lt; 9; i++ { var row_count, column_count [9]int for j := 0; j \u0026lt; 9; j++ { // row-wise/column-wise matrix coordinates (i, j) and (j, i) row_count[matrix[i][j]-1]++ column_count[matrix[j][i]-1]++ } for digit := 0; digit \u0026lt; 9; digit++ { row_condition := row_count[digit] != 1 column_condition := column_count[digit] != 1 if row_condition || column_condition { return false } } } // check sub-box conditions for i := 0; i \u0026lt; 9; i += 3 { for j := 0; j \u0026lt; 9; j += 3 { // (i, j) represents the upper-left corner of each Sudoku sub-box var box_count [9]int for y := j; y \u0026lt; j+3; y++ { for x := i; x \u0026lt; i+3; x++ { // 3x3 Sudoku sub-matrix-wise coordinates (y, x) box_count[matrix[y][x]-1]++ } } for _, count := range box_count { if count != 1 { return false } } } } return true } You can run the above-mentioned code from your browser with the following Go Playground.\nCburnett. (2017, April 8). Sudoku Puzzle by L2G-20050714 solution standardized layout. Wikimedia. https://commons.wikimedia.org/wiki/File:Sudoku_Puzzle_by_L2G-20050714_solution_standardized_layout.svg\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-10-28","permalink":"/posts/go/sudoku_verifier/","section":"Posts","summary":"My attempt at writing a verification function for a sudoku matrix","title":"Sudoku Verifier"},{"content":"This document summarises how I set-up my UNIX-like command-line environment (on Linux and macOS) for easier interaction with command-line interfaces (CLIs).\nzsh # Plug-ins # The syntax highlighting plug-in enables more descriptive colourings of commands, flag and strings. The history substring search plug-in enables easier history substring search with less keystrokes. Note: This is not commonly packaged in the primary repositories of Debian and Red Hat, which means that you\u0026rsquo;ll need to download the source from the above-mentioned upstream GitHub repository. The additional completion scripts plugin adds community-maintained zsh completion scripts for programs that don\u0026rsquo;t ship with them by default. Note: This is not commonly packaged in the primary repositories of Debian and Red Hat, which means that you\u0026rsquo;ll need to download the source from the above-mentioned upstream GitHub repository. Platform Installation Command Arch-based sudo pacman -S zsh-completions zsh-history-substring-search zsh-syntax-highlighting Debian-based sudo apt install zsh-syntax-highlighting Red Hat-based sudo dnf install zsh-syntax-highlighting macOS brew install zsh-completions zsh-history-substring-search zsh-syntax-highlighting The following code should be added to your ~/.zshrc file in order to use the history substring search and syntax highlighting plug-ins:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;linux-gnu\u0026#34;* ]]; then source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh elif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh fi Manual Page Colours # My manual page colour configuration is inspired by Kali\u0026rsquo;s default ~/.zshrc file:\nexport LESS_TERMCAP_mb=$\u0026#39;\\E[1;31m\u0026#39; export LESS_TERMCAP_md=$\u0026#39;\\E[1;36m\u0026#39; export LESS_TERMCAP_me=$\u0026#39;\\E[0m\u0026#39; export LESS_TERMCAP_so=$\u0026#39;\\E[01;33m\u0026#39; export LESS_TERMCAP_se=$\u0026#39;\\E[0m\u0026#39; export LESS_TERMCAP_us=$\u0026#39;\\E[1;32m\u0026#39; export LESS_TERMCAP_ue=$\u0026#39;\\E[0m\u0026#39; ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern) ZSH_HIGHLIGHT_STYLES[default]=none ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline ZSH_HIGHLIGHT_STYLES[global-alias]=fg=magenta ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline ZSH_HIGHLIGHT_STYLES[path]=underline ZSH_HIGHLIGHT_STYLES[path_pathseparator]= ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]= ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[command-substitution]=none ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta ZSH_HIGHLIGHT_STYLES[process-substitution]=none ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=magenta ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=magenta ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta ZSH_HIGHLIGHT_STYLES[assign]=none ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold ZSH_HIGHLIGHT_STYLES[named-fd]=none ZSH_HIGHLIGHT_STYLES[numeric-fd]=none ZSH_HIGHLIGHT_STYLES[arg0]=fg=green ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout Settings # The following commands set:\nnumber of commands saved to the history file. ability to use the up and down arrow keys to access the history interactively, like in BASH and to search for a prefix in history menu-style command completion the tab character is displayed as 4 spaces the cursor is displayed as a | character HISTSIZE=1000 SAVEHIST=1000 setopt INC_APPEND_HISTORY setopt SHARE_HISTORY setopt HIST_IGNORE_DUPS setopt HIST_IGNORE_ALL_DUPS setopt HIST_SAVE_NO_DUPS setopt HIST_REDUCE_BLANKS HISTFILE=~/.zsh_history autoload -Uz compinit \u0026amp;\u0026amp; compinit -i autoload -Uz bashcompinit \u0026amp;\u0026amp; bashcompinit -i zstyle \u0026#39;:completion:*\u0026#39; menu select if [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then zstyle \u0026#39;:completion:*:*:-command-:*:*\u0026#39; ignored-patterns \u0026#39;clean-diff\u0026#39; fi bindkey \u0026#39;^[[A\u0026#39; history-substring-search-up bindkey \u0026#39;^[[B\u0026#39; history-substring-search-down touch ~/.hushlogin tabs -4 echo -e -n \u0026#34;\\x1b[\\x35 q\u0026#34; Completions # Azure CLI # Azure CLI\u0026rsquo;s and kompose\u0026rsquo;s Linux installation requires the following command to be added to ~/.zshrc file in order to enable command completion:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;linux-gnu\u0026#34;* ]]; then source /etc/bash_completion.d/azure-cli elif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then source $(brew --prefix)/etc/bash_completion.d/az fi HashiCorp CLIs # HashiCorp\u0026rsquo;s programs (excluding vagrant) require a set-up script to be run before their completions are exposed to the shell. Since terraform\u0026rsquo;s completion scripts are already shipped by default on Arch-based Linux distributions, I specifically run its completion script only on macOS.\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then complete -o nospace -C $(which terraform) terraform fi complete -o nospace -C $(which vault) vault complete -o nospace -C $(which nomad) nomad macOS # If you install your command-line tools with the Homebrew package manager, the following code snippet from their documentation1 should be added to the appropriate place in ~/.zshrc file.\nIn my case, the following configuration worked the best, since other tools (such as vagrant) keep the completions in other places:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then FPATH=\u0026#34;$(brew --prefix)/share/zsh/site-functions:$(brew --prefix)/share/zsh-completions:${FPATH}\u0026#34; fi Otherwise, this shorter FPATH extension would also work:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then FPATH=\u0026#34;$(brew --prefix)/share/zsh/site-functions:${FPATH}\u0026#34; fi Docker Desktop # By default, Docker Desktop doesn\u0026rsquo;t install the completion scripts to where zsh expects them to be installed on macOS. In order to resolve this, these scripts can be symbolically linked to the correct file system path, as shown on the Docker documentation2:\netc=/Applications/Docker.app/Contents/Resources/etc ln -s $etc/docker.zsh-completion $(brew --prefix)/share/zsh/site-functions/_docker ln -s $etc/docker-compose.zsh-completion $(brew --prefix)/share/zsh/site-functions/_docker-compose Core Utilities on macOS # I find the GNU core utilities more feature-rich than the BSD core utilities that are shipped with macOS. As a result, when I need the GNU core utilities on macOS, I install them with the Homebrew package manager by running: brew install coreutils binutils gnu-tar gnu-sed grep gawk make bison flex. These utilities can be enabled from your ~/.zshrc file:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then PATH=\u0026#34;$(brew --prefix)/opt/coreutils/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/binutils/bin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/gnu-tar/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/gnu-sed/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/grep/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/gawk/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/make/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/flex/bin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/bison/bin:$PATH\u0026#34; fi Prompt # I use the prompt program Starship, which enables my prompt to display additional information based on the files in the current directory, such as:\nGit branch Git status programming language version package version Starships displays the prompt based on a TOML configuration file stored at ~/.config/starship.toml3. This file defines in which order the information is displayed in the prompt, and also how that information is displayed.\nformat = \u0026#34;\u0026#34;\u0026#34;\\ $time\\ $username\\ $hostname\\ $directory\\ $git_branch\\ $git_commit\\ $git_state\\ $git_status\\ $package\\ $nodejs\\ $python\\ $golang\\ $java\\ $line_break\\ $cmd_duration\\ $character\\ \u0026#34;\u0026#34;\u0026#34; add_newline = false [time] format = \u0026#34;[$time]($style) \u0026#34; disabled = false use_12hr = true style = \u0026#34;blue bold\u0026#34; [character] success_symbol = \u0026#34;[\\\\$](bold green)\u0026#34; error_symbol = \u0026#34;[\\\\$](bold red) \u0026#34; [cmd_duration] format = \u0026#34;[$duration](bold yellow) \u0026#34; [hostname] format = \u0026#34;on [$hostname]($style) \u0026#34; ssh_only = false disabled = false style = \u0026#34;green bold\u0026#34; [username] format = \u0026#34;via [$user]($style) \u0026#34; disabled = false show_always = true style_user = \u0026#34;red bold\u0026#34; style_root = \u0026#34;red bold\u0026#34; [directory] format = \u0026#34;in [$path]($style) \u0026#34; disabled = false style = \u0026#34;yellow bold\u0026#34; Don\u0026rsquo;t forget to append Starship\u0026rsquo;s initialisation command to your ~/.zshrc file:\neval \u0026#34;$(starship init zsh)\u0026#34; GIF Demonstration # The following GIF was made using vhs with this hyperlinked .tape file:\nA GIF showing my command-line shell prompt configuration Aliases # The following aliases are useful if you stick with the default BSD core utilities of macOS:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then alias ls=\u0026#39;ls -G\u0026#39; alias rm=\u0026#39;rm -i\u0026#39; fi These aliases are useful for a more convenient and colourful command-line experience:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;linux-gnu\u0026#34;* ]]; then alias open=\u0026#39;xdg-open $1 2\u0026gt; /dev/null\u0026#39; elif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then alias python=\u0026#34;$(brew --prefix)/bin/python3\u0026#34; alias python3=\u0026#34;$(brew --prefix)/bin/python3\u0026#34; alias pip=\u0026#34;$(brew --prefix)/bin/pip3\u0026#34; alias pip3=\u0026#34;$(brew --prefix)/bin/pip3\u0026#34; alias tailscale=\u0026#34;/Applications/Tailscale.app/Contents/MacOS/Tailscale\u0026#34; fi alias ls=\u0026#39;ls --color\u0026#39; alias rm=\u0026#39;rm -iI --preserve-root\u0026#39; alias clear=\u0026#34;printf \u0026#39;\\33c\\e[3J\u0026#39;\u0026#34; alias la=\u0026#39;ls -AlhF\u0026#39; alias lh=\u0026#39;ls -lhF\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias ln=\u0026#39;ln -i\u0026#39; alias df=\u0026#39;df -h\u0026#39; alias chown=\u0026#39;chown --preserve-root\u0026#39; alias chmod=\u0026#39;chmod --preserve-root\u0026#39; alias chgrp=\u0026#39;chgrp --preserve-root\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; alias bc=\u0026#39;bc -l\u0026#39; alias gitkraken=\u0026#39;git log --graph --decorate --oneline\u0026#39; git # I use a ~/.gitconfig4 file to configure:\nmy author details cryptographic signatures auto-push new branches command-line editor more colourful output [user] name = Omri Bornstein email = omribor@gmail.com [commit] gpgSign = true [tag] gpgSign = true [push] autoSetupRemote = true [core] editor = nano [color] status = auto branch = auto interactive = auto diff = auto Font # Fira Code for programming-related ligatures. Nerd Fonts as fallback for specialised icons. My Visual Studio Code font family settings are descried below, with the integrated terminal\u0026rsquo;s font set to follow the editor\u0026rsquo;s:\n{ // ... \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Fira Code\u0026#39;, \u0026#39;FiraCode Nerd Font\u0026#39;, \u0026#39;Cascadia Code\u0026#39;, \u0026#39;JetBrains Mono\u0026#39;, Menlo, Monaco, \u0026#39;Courier New\u0026#39;, monospace\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;\u0026#34;, // ... } https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://docs.docker.com/desktop/faqs/macfaqs/#zsh\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://starship.rs/config/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://git-scm.com/docs/git-config\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-10-21","permalink":"/posts/shell/","section":"Posts","summary":"My zsh configuration for Linux and macOS","title":"Command-line Shell Configuration"},{"content":"","date":null,"permalink":"/tags/macos/","section":"Tags","summary":"","title":"macOS"},{"content":"","date":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"shell"},{"content":"","date":null,"permalink":"/tags/zsh/","section":"Tags","summary":"","title":"ZSH"},{"content":"","date":"2022-10-14","permalink":"https://youtu.be/oc_Ndi7p3Eg\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"Introduction to Steganography \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/steganography/","section":"Tags","summary":"","title":"steganography"},{"content":"Prompt # Cheers for that, I\u0026rsquo;m assuming you\u0026rsquo;ve worked out that I\u0026rsquo;m YouTuber\u0026hellip; What\u0026rsquo;s my channel name?\nNote: This challenge assumes you have solved Honk Honk before attempting.\nSolution # Search for 23HONK on YouTube\nThe first result from the Mighty Car Mods channel features a NSW vehicle registration plate of 23HONK:\nFlag: DUCTF{MightyCarMods}\n","date":"2022-09-23","permalink":"/posts/downunderctf/does_it_fit_my_ctf/","section":"Posts","summary":"DownUnderCTF 2022 Does It Fit My CTF challenge","title":"DownUnderCTF Does It Fit My CTF?"},{"content":"Prompt # I\u0026rsquo;m shocking when it comes to remembering when my car\u0026rsquo;s CTP is up\u0026hellip;can you let me know the exact date (DD/MM/YYYY) when it\u0026rsquo;s due? My rego is 23HONK.\nSolution # Go to NSW Vehicle Registration Check Search for 23HONK Flag: DUCTF{19/07/2023}\nFurther Information # About the Vehicle # Key Value Make NISSAN Model MARCH 3 DOOR TURBO Colour WHITE Shape SEDAN Manufacture year 1992 Tare weight 740 kg ","date":"2022-09-23","permalink":"/posts/downunderctf/honk_honk/","section":"Posts","summary":"DownUnderCTF 2022 Honk Honk challenge","title":"DownUnderCTF Honk Honk"},{"content":"Prompt # Have you joined the DUCTF Discord yet? There are some spicy memes, a certified memer has posted one that will give you a flag!\nSolution # The following GIF was recovered from the memes channel:\nFlag: DUCTF{G'day_mates_this'll_be_a_cracka}\n","date":"2022-09-23","permalink":"/posts/downunderctf/discord/","section":"Posts","summary":"DownUnderCTF 2022 Discord challenge","title":"DownUnderCTF Discord 2022"},{"content":"","date":"2022-08-28","permalink":"https://monsec.io/resources/kali/\" target=\"_blank","section":"Posts","summary":"","title":"Kali Linux Configuration \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/virtualbox/","section":"Tags","summary":"","title":"VirtualBox"},{"content":"","date":null,"permalink":"/posts/shell_ctf/","section":"Posts","summary":"SHELL CTF solutions","title":"SHELL CTF"},{"content":"Prompt # Dragonairre, the dragon with the hexadecimal head has attacked the village to take revenge on his last defeat, we need to get the ultimate weapon.\nAnalysis # $ ./vault Help us defeat the dragon!! Enter the code:22 wron..aaaaaahhhhhhhh The decompiled code reveals that the hexadecimal number 0x10f2c, or the decimal number 69420 (nice) is the code the program requires. My attempt at rewriting the main function based on the above-mentioned decompilation is shown below:\nint main() { printf(\u0026#34;Help us defeat the dragon!! Enter the code:\u0026#34;); int code; scanf(\u0026#34;%d\u0026#34;, \u0026amp;code); if (code == 0x10f2c) { printf(\u0026#34;Yeahh!!,we did it,We defeated the dragon.Thanks for your help here\u0026#39;s your reward : %s\u0026#34;, flag); } else if (code == 0x45) { printf(\u0026#34;Nice,but this is not the code :(.\u0026#34;); } else if (code != 0x1a4) { printf(\u0026#34;wron..aaaaaahhhhhhhh\u0026#34;); } else { printf(\u0026#34;Bruh!! Seriously?\u0026#34;); } return 0; } Solution # After the supplying the expected code in decimal form, a flag-like output is introduced:\n$ ./vault Help us defeat the dragon!! Enter the code:69420 Yeahh!!,we did it,We defeated the dragon.Thanks for your help here\u0026#39;s your reward : SHELLCTF{5348454c4c4354467b31355f523376337235316e675f333473793f7d} However, the real flag is hexadecimally-encoded within the fake one, which is decoded with pwn unhex below:\n$ echo \u0026#34;5348454c4c4354467b31355f523376337235316e675f333473793f7d\u0026#34; | pwn unhex SHELLCTF{15_R3v3r51ng_34sy?} ","date":"2022-08-12","permalink":"/posts/shell_ctf/how_to_defeat_a_dragon/","section":"Posts","summary":"SHELL CTF 2022 How to Defeat a Dragon challenge","title":"SHELL CTF How to Defeat a Dragon"},{"content":"","date":null,"permalink":"/tags/shell_ctf/","section":"Tags","summary":"","title":"SHELL_CTF"},{"content":"","date":null,"permalink":"/tags/uactf/","section":"Tags","summary":"","title":"UACTF"},{"content":"","date":null,"permalink":"/posts/uactf/","section":"Posts","summary":"","title":"UACTF"},{"content":"Prompt # I didn\u0026rsquo;t know that strings was a command until way later LMAO. ¯\\_(ツ)_/¯\nSolution # As the name suggests, this challenge\u0026rsquo;s purpose is to jump-start the reversing category. I decided to start the challenge by following the prompt and printing the ASCII strings the binary contains, and filter for the flag format.\n$ strings sanity-check | grep \u0026#34;UACTF\u0026#34; UACTF{N3V3R_G0NN4_L37_Y0U_D0WN} ","date":"2022-07-30","permalink":"/posts/uactf/sanity-check/","section":"Posts","summary":"UACTF 2022 Sanity Check challenge","title":"UACTF Sanity Check"},{"content":"","date":null,"permalink":"/tags/congo/","section":"Tags","summary":"","title":"Congo"},{"content":"","date":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"CSS"},{"content":"","date":null,"permalink":"/tags/fonts/","section":"Tags","summary":"","title":"fonts"},{"content":"","date":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"HTML"},{"content":"This document summarises how I set-up this website\u0026rsquo;s layout, fonts and typesetting. As a result, I highly recommend the Congo theme for the Hugo static site generator due to its layout, styling and extensibility.\nAdditions to Congo # I added some features because I\u0026rsquo;m not pleased with how Hugo\u0026rsquo;s shortcode syntax prevents some content from being rendered correctly on external Markdown platforms such as GitHub and GitLab.\nThe conditional loading of KaTeX and Mermaid is possible because of the modified head.html partial template that calls to the extend-head.html partial template with global context (with {{partial \u0026quot;extend-head.html\u0026quot; $}}) instead of configuration file context (with {{partial \u0026quot;extend-head.html\u0026quot; .Site}}).\nKaTeX # The following layouts/partials/extend-head.html code is based on this comment from the Congo Theme discussion board, and is also based on this file from Congo Theme\u0026rsquo;s codebase.\n{{if $.Params.math}} {{$katexCSS := resources.Get \u0026#34;lib/katex/katex.min.css\u0026#34;}} {{$katexCSS := $katexCSS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;link type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{$katexCSS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexCSS.Data.Integrity}}\u0026#34;\u0026gt; {{$katexJS := resources.Get \u0026#34;lib/katex/katex.min.js\u0026#34;}} {{$katexJS := $katexJS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer src=\u0026#34;{{$katexJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{$katexRenderJS := resources.Get \u0026#34;lib/katex/auto-render.min.js\u0026#34;}} {{$katexRenderJS := $katexRenderJS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer src=\u0026#34;{{$katexRenderJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexRenderJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{$katexFonts := resources.Match \u0026#34;lib/katex/fonts/*\u0026#34;}} {{range $katexFonts}} \u0026lt;!-- {{.RelPermalink}} --\u0026gt; {{end}} \u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { for (const p of document.querySelectorAll(\u0026#34;p\u0026#34;)) { if (/\\$\\$.*\\$\\$/g.test(p.innerText) \u0026amp;\u0026amp; p.hasChildNodes()) { for (const child of p.children) { if (child.tagName === \u0026#34;EM\u0026#34;) { const textNode = document.createTextNode(`_${child.innerText}_`); p.replaceChild(textNode, child); } } } } renderMathInElement(document.body, { delimiters: [ { left: \u0026#34;$$\u0026#34;, right: \u0026#34;$$\u0026#34;, display: true }, { left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false }, ], preProcess: math =\u0026gt; math.replaceAll(\u0026#34; \\\\\\n\u0026#34;, \u0026#34; \\\\\\\\\\n\u0026#34;), throwOnError: false }); }); \u0026lt;/script\u0026gt; {{end}} This change makes the KaTeX CSS and JavaScript files to load by default, and it also enables the single $ delimiter to be used with less future configuration.\nResult # With these configurations added, graphically-complex inline math expressions such as the following can be rendered:\nA second order polynomial euqation can be solved with the formula $\\displaystyle x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$ for a quadratic equation of the form $ax^2 + bx + c = 0$, for all $a \\neq 0$. On a spherical surface, the area of a triangle with angles $\\alpha$, $\\beta$ and $\\gamma$ (all measured in radians) is described by the formula $A_t = r^2(\\alpha + \\beta + \\gamma - \\pi)$, when $r$ is the radius of the sphere. Binet\u0026rsquo;s Formula for calculating arbitrary Fibonacci numbers states that $\\displaystyle F_n = \\frac{\\phi^n - (-\\phi)^{-n}}{\\sqrt{5}}$, when $\\displaystyle \\phi = \\frac{1 + \\sqrt{5}}{2}$. The integral of a polynomial of degree $n \\neq -1$ can be calculated by the formula $\\displaystyle \\int x^n dx = \\frac{x^{n + 1}}{n + 1} + C$ In addition, blocks of multi-line mathematical expressions can be rendered:\n$$ \\begin{align*} x \u0026amp;= \\frac{1}{x - 1} \u0026amp; \\text{definition of } \\phi \\ x(x - 1) \u0026amp;= 1 \u0026amp; \\times (x - 1) \\ x^2 - x \u0026amp;= 1 \u0026amp; a(b \\pm c) = ab \\pm ac \\ x^2 - x - 1 \u0026amp;= 0 \u0026amp; -1 \\ x \u0026amp;= \\frac{-(-1) \\pm \\sqrt{(-1)^2 - 4 \\cdot (-1)}}{2} \u0026amp; \\text{using } x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\ \u0026amp;\u0026amp; \\text{when } ax^2 + bx +c = 0 \\wedge a \\neq 0 \\ \u0026amp;= \\frac{1 \\pm \\sqrt{1 + 4}}{2} \u0026amp; \\text{simplification} \\ \u0026amp;= \\frac{1 \\pm \\sqrt{5}}{2} \u0026amp; \\text{simplification} \\end{align*} $$\nDue to Hugo\u0026rsquo;s use of the \\ character for text escaping, the preProcess1 function is required in order to correctly render the $\\TeX$ source code as it was intended to be rendered. Moreover, the align* environment seems to be the most compatible between KaTeX and MathJax.\nTechnical Diagrams # The following layouts/partials/extend-head.html code is based on Docsy\u0026rsquo;s diagram support, and implemented similarly to Docsy\u0026rsquo;s implementation, and Congo\u0026rsquo;s implementation, the theme settings are based on Mermaid\u0026rsquo;s documentation.\n{{if .Params.diagrams}} {{$mermaidLib := resources.Get \u0026#34;lib/mermaid/mermaid.min.js\u0026#34;}} {{$mermaidConfig := resources.Get \u0026#34;js/mermaid.js\u0026#34;}} {{$mermaidConfig := $mermaidConfig | resources.Minify}} {{$mermaidJS := slice $mermaidLib $mermaidConfig | resources.Concat \u0026#34;js/mermaid.bundle.js\u0026#34; | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{$mermaidJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$mermaidJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; /** * @type {string} color an RGB tuple that represents a colour in CSS * @returns an RGB CSS function form of the variable */ function tuple2RGB(color) { return `rgb(${getComputedStyle(document.documentElement).getPropertyValue(color)})`; } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const diagrams = document.querySelectorAll(\u0026#34;code.language-mermaid\u0026#34;); let hasDiagram = diagrams.length \u0026gt; 0; if (!hasDiagram) return; for (const diagram of diagrams) { const text = diagram.textContent; const pre = document.createElement(\u0026#34;pre\u0026#34;); pre.classList.add(\u0026#34;mermaid\u0026#34;); pre.textContent = text; diagram.parentElement.replaceWith(pre); } const colorScheme = window.matchMedia(\u0026#34;(prefers-color-scheme: dark)\u0026#34;); colorScheme.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; location.reload()); let scheme = localStorage.getItem(\u0026#34;appearance\u0026#34;); if (scheme === null) { scheme = colorScheme.matches ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;; } const textColor = scheme === \u0026#34;dark\u0026#34; ? \u0026#34;white\u0026#34; : \u0026#34;black\u0026#34;; mermaid.initialize({ theme: \u0026#34;base\u0026#34;, themeVariables: { background: tuple2RGB(\u0026#34;--color-neutral\u0026#34;), primaryColor: tuple2RGB(\u0026#34;--color-primary-200\u0026#34;), secondaryColor: tuple2RGB(\u0026#34;--color-secondary-200\u0026#34;), tertiaryColor: tuple2RGB(\u0026#34;--color-neutral-100\u0026#34;), primaryBorderColor: tuple2RGB(\u0026#34;--color-primary-400\u0026#34;), secondaryBorderColor: tuple2RGB(\u0026#34;--color-secondary-400\u0026#34;), tertiaryBorderColor: tuple2RGB(\u0026#34;--color-neutral-400\u0026#34;), lineColor: tuple2RGB(\u0026#34;--color-neutral-600\u0026#34;), textColor: textColor, loopTextColor: textColor, actorTextColor: textColor, mainBkg: (() =\u0026gt; { switch (scheme === \u0026#34;dark\u0026#34;) { case true: return tuple2RGB(\u0026#34;--color-neutral-800\u0026#34;); case false: return tuple2RGB(\u0026#34;--color-neutral\u0026#34;); } })(), fontFamily: \u0026#34;ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,helvetica neue,Arial,noto sans,sans-serif\u0026#34;, fontSize: \u0026#34;16px\u0026#34; } }); document.querySelector(\u0026#34;button#appearance-switcher-0\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; location.reload()); }); \u0026lt;/script\u0026gt; {{end}} The following CSS was added to assets/css/custom.css, in order to make the diagram\u0026rsquo;s background colour transparent.\npre.mermaid { background-color: transparent !important; } Result # With these configurations added, diagrams such as the one below can be rendered:\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! Changes to Congo # I was not completely satisfied with some of the styling of the default Congo theme, but luckily, it supports extensive customisations.\nCSS # Horizontal Scrolling # The following CSS was added to assets/css/custom.css in order to disable horizontal scrolling.\nThe single-line width of HTML a tags HTML tags is capped at the screen width. Horizontal scroll is disabled on the HTML body scope. body { overflow-x: hidden; } a { max-width: 100vw !important; word-wrap: break-word !important; } In order to render multi-line math expressions correctly in small-width screens, the following CSS code was added to assets/css/custom.css:\n@media (max-width: 640px) { span.katex-display \u0026gt; * { font-size: 0.65rem !important; } } In order to ensure search results don\u0026rsquo;t overflow the intended width, the maximum width is restricted accordingly with following CSS code was added to assets/css/custom.css:\n#search-results \u0026gt; li \u0026gt; a \u0026gt; * { max-width: calc(100% - 1.5rem) !important; word-wrap: break-word !important; } In order to ensure that embedded YouTube videos stay withing the width of a mobile screen, the following CSS code was added to assets/css/custom.css:\niframe { max-width: 100%; } Fixed-Width Font # The following CSS was added to assets/css/custom.css (based on this Stack Overflow comment) in order to set Fira Code/Cascadia Code (or the OS\u0026rsquo;s default) as the fixed-width font, used in code snippets.\n@font-face { font-family: \u0026#39;Fira Code\u0026#39;; src: local(\u0026#39;FiraCode-Regular\u0026#39;), url(\u0026#39;/FiraCode-Regular.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;); } code { font-family: \u0026#39;Cascadia Code\u0026#39;, \u0026#39;Fira Code\u0026#39;, monospace !important; } Result # Multi-character syntax tokens such as :=, ++, != and \u0026lt;- should be rendered in a more graphic manner.\nfunc f() { q := make(chan int) for i := 1; i \u0026lt; 5; i++ { if i != 2 { q \u0026lt;- i } } } Backtick-less Inline Code Snippets # The following CSS was added to assets/css/custom.css in order to revert Congo Theme\u0026rsquo;s main.css that surrounds inline code snippets with backtick symbols.\n.prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::before { content: unset !important; } .prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::after { content: unset !important; } Quote-less Block Quote # The following CSS was added to assets/css/custom.css in order to revert Congo Theme\u0026rsquo;s main.css that surrounds block quote with literal quotes.\n.prose :where(blockquote p:first-of-type):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::before { content: unset !important; } .prose :where(blockquote p:last-of-type):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::after { content: unset !important; } Nested Unordered Lists # The following CSS was added to assets/css/custom.css in order to set the second nested unordered list item bullet style as a square instead of a circle\nul \u0026gt; li \u0026gt; ul { list-style-type: square !important; } Content Width # The following CSS was added to assets/css/custom.css in order to increase the content width (based on Congo Theme\u0026rsquo;s main.css):\n.max-w-7xl { max-width: 100rem !important; } .max-w-prose { max-width: 100ch !important; } The following CSS was added to assets/css/custom.css in order to decrease the spacing between the menu items (based on Congo Theme\u0026rsquo;s main.css):\n@media(min-width: 640px) { [dir=\u0026#34;rtl\u0026#34;] .prose ol \u0026gt; li, [dir=\u0026#34;ltr\u0026#34;] .ltr\\:sm\\:mr-7 { margin-right: 0.75rem !important; } } Colour Scheme # The following CSS was added to assets/css/schemes/fruit.css (based on Congo\u0026rsquo;s congo.css and fire.css) change the colour scheme primary and secondary colours from violate-fuchsia to orange-red.\n:root { --color-neutral: 255, 255, 255; /* Gray */ --color-neutral-50: 250, 250, 250; --color-neutral-100: 244, 244, 245; --color-neutral-200: 228, 228, 231; --color-neutral-300: 212, 212, 216; --color-neutral-400: 161, 161, 170; --color-neutral-500: 113, 113, 122; --color-neutral-600: 82, 82, 91; --color-neutral-700: 63, 63, 70; --color-neutral-800: 39, 39, 42; --color-neutral-900: 24, 24, 27; /* Orange */ --color-primary-50: 255, 247, 237; --color-primary-100: 255, 237, 213; --color-primary-200: 254, 215, 170; --color-primary-300: 253, 186, 116; --color-primary-400: 251, 146, 60; --color-primary-500: 249, 115, 22; --color-primary-600: 234, 88, 12; --color-primary-700: 194, 65, 12; --color-primary-800: 154, 52, 18; --color-primary-900: 124, 45, 18; /* Rose */ --color-secondary-50: 255, 241, 242; --color-secondary-100: 255, 228, 230; --color-secondary-200: 254, 205, 211; --color-secondary-300: 253, 164, 175; --color-secondary-400: 251, 113, 133; --color-secondary-500: 244, 63, 94; --color-secondary-600: 225, 29, 72; --color-secondary-700: 190, 18, 60; --color-secondary-800: 159, 18, 57; --color-secondary-900: 136, 19, 55; } Menu Header # The following CSS was added to assets/css/custom.css in order to show/hide the desktop or mobile menu header based on the width of the screen:\n@media (min-width: 700px) { #header-narrow { display: none !important; } .header-wide { display: block !important; } } /* header for narrow screens */ @media (max-width: 700px) { #header-narrow { display: block !important; } .header-wide { display: none !important; } li#header-narrow \u0026gt; label \u0026gt; div \u0026gt; ul { padding-top: 3rem !important; } } The HTML was inspired by a combination of Congo Theme\u0026rsquo;s basic and hamburger layouts. The HTML code is available at layouts/partials/header/custom.html.\nConfiguration # Hugo # The following YAML snippets are taken from my hugo.yml, and always start from the root level of the YAML tree.\nDependencies # I import the Congo library using Hugo Modules.\n# yaml-language-server: $schema=https://json.schemastore.org/hugo.json module: imports: - path: github.com/jpanther/congo/v2 Markup # Syntax highlighting is configured to enable the copy button. The table of contents renders every heading in order. # yaml-language-server: $schema=https://json.schemastore.org/hugo.json markup: highlight: noClasses: false goldmark: renderer: unsafe: true tableOfContents: startLevel: 1 endLevel: 6 Other # I set the base URL for GitHub Pages compatibility. I set the timezone, in order to prevent pages with \u0026ldquo;future\u0026rdquo; dates from not rendering immediately. Git\u0026rsquo;s metadata is used to determine when a document has been updated. Hugo outputs are configured in order to enable content search. # yaml-language-server: $schema=https://json.schemastore.org/hugo.json baseURL: https://applegamer22.github.io timeZone: Australia/Melbourne defaultContentLanguage: en title: Omri Bornstein enableGitInfo: true paginate: 15 summaryLength: 0 outputs: home: - HTML - RSS - JSON Congo # Metadata # Basic information about me and the website is configured such that browser citation plugins can get the correct information.\n# yaml-language-server: $schema=https://json.schemastore.org/hugo.json languages: en: languageName: English languageCode: en isoCode: en rtl: false dateFormat: \u0026#34;2006-01-02\u0026#34; weight: 1 title: Omri Bornstein description: Omri Bornstein\u0026#39;s personal website author: name: Omri Bornstein Menu # The menu links and their order are set-up as follows:\n# yaml-language-server: $schema=https://json.schemastore.org/hugo.json languages: en: menu: main: - name: About pageRef: about weight: 1 - name: Posts pageRef: posts weight: 2 - name: Talks pageRef: talks weight: 3 - name: Projects pageRef: projects weight: 4 - name: CV pageRef: cv weight: 5 - name: Tags pageRef: tags weight: 6 Articles # The following article metadata is shown: table of contents taxonomies word count date added/updated Git repository hyperlink # yaml-language-server: $schema=https://json.schemastore.org/hugo.json params: article: showBreadcrumbs: true showTableOfContents: true showTaxonomies: true showWordCount: true showEdit: true showDateUpdated: true editURL: https://github.com/AppleGamer22/applegamer22.github.io/tree/master/content Other # These configurations are in this section because they do not fit in a coherent category:\nColour scheme The code copying button is enabled on multi-line code blocks Content search is enabled Recent posts from the blog are shown in the homepage The homepage is rendered as profile configuration A custom menu header layout is used A theme switcher is shown in footer A table of contents is shown for every list page # yaml-language-server: $schema=https://json.schemastore.org/hugo.json params: colorScheme: fruit enableCodeCopy: true enableSearch: true mainSections: - \u0026#34;posts\u0026#34; homepage: layout: profile showRecent: true header: layout: custom footer: showAppearanceSwitcher: true list: showTableOfContents: true showBreadcrumbs: true https://katex.org/docs/autorender.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-07-13","permalink":"/posts/hugo/","section":"Posts","summary":"My changes, additions and set-up of this Hugo-Congo website","title":"Hugo \u0026 Congo Configuration"},{"content":"","date":null,"permalink":"/tags/markdown/","section":"Tags","summary":"","title":"Markdown"},{"content":"","date":null,"permalink":"/tags/typesetting/","section":"Tags","summary":"","title":"typesetting"},{"content":"","date":null,"permalink":"/tags/bootstrap/","section":"Tags","summary":"","title":"Bootstrap"},{"content":"","date":null,"permalink":"/tags/client/","section":"Tags","summary":"","title":"client"},{"content":"","date":null,"permalink":"/tags/full-stack/","section":"Tags","summary":"","title":"full-stack"},{"content":"","date":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects"},{"content":"A social media scraper that is interfaced via a server-side rendered HTML user interface (or a CLI), and is managed by a REST API and a NoSQL database.\nraker\u0026rsquo;s Logo References # The Raker Gopher is based on an original work by Renee French. Ueda, T. (2016, July 27). Gopher Vector Graphics. GitHub. https://github.com/golang-samples/gopher-vector Google. (2022, February 4). Google Chrome Icon. Google. https://www.google.com/chrome/whats-new/m100 ","date":"2022-05-08","permalink":"https://github.com/AppleGamer22/raker\" target=\"_blank","section":"Projects","summary":"A social media scraper that is interfaced via a server-side rendered HTML user interface (or a CLI), and is managed by a REST API and a NoSQL database.","title":"\u003ccode\u003eraker \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"","date":null,"permalink":"/tags/regex/","section":"Tags","summary":"","title":"regex"},{"content":"","date":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows"},{"content":"A cross-platform file-watcher that can run a command after each file-system operation on a given files or simply wait once until a file is changed.\n","date":"2022-05-08","permalink":"https://github.com/AppleGamer22/stalk\" target=\"_blank","section":"Projects","summary":"A cross-platform file-watcher that can run a command after each file-system operation on a given files or simply wait once until a file is changed.","title":"\u003ccode\u003estalk \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"","date":null,"permalink":"/tags/utility/","section":"Tags","summary":"","title":"utility"},{"content":"","date":"2022-03-28","permalink":"https://youtu.be/893L13SxDUg\" target=\"_blank","section":"Talks \u0026 Publications","summary":"","title":"Reverse Engineering with Ghidra (2022) \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"A cross-platform re-implementation of the macOS utility caffeinate that keeps the screen turned on either until stopped, for a set duration of time or while another process still runs.\n","date":"2022-03-12","permalink":"https://github.com/AppleGamer22/cocainate\" target=\"_blank","section":"Projects","summary":"A cross-platform re-implementation of the macOS utility caffeinate that keeps the screen turned on either until stopped, for a set duration of time or while another process still runs.","title":"\u003ccode\u003ecocainate \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"A Discord bot for MonSec\u0026rsquo;s Discord server, that fetches statistics about competing Capture the Flag teams from CTFtime, and displays them in the Discord interface.\n","date":"2021-12-21","permalink":"https://github.com/monsec/ctftime-discord-bot\" target=\"_blank","section":"Projects","summary":"A Discord bot for MonSec\u0026rsquo;s Discord server, that fetches statistics about competing Capture the Flag teams from CTFtime, and displays them in the Discord interface.","title":"CTFtime Discord Bot \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/discord/","section":"Tags","summary":"","title":"Discord"},{"content":"","date":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++"},{"content":"As part of the FIT2082 unit, I contributed to an existing codebase, based on prior research by (Gange, Harabor and Stuckey, 2021) about Lazy CBS, their Multi-Agent Path Finding (MAPF) algorithm.\nI modified the Lazy CBS codebase such that the algorithm also outputs the final set of constraints that is used to rule out paths, such that the Lazy CBS is formally an Explainable Multi-Agent Path Finding (XMAPF) algorithm. I enabled Python-to-C++ bindings, such that the compiled Lazy CBS codebase can be used as a Python-facing library for future projects. ","date":"2021-08-20","permalink":"https://github.com/AppleGamer22/FIT2082\" target=\"_blank","section":"Projects","summary":"Extending a Multi-Agent Path Finding (MAPF) algorithm","title":"FIT2082 Computer Science Research Project \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/mapf/","section":"Tags","summary":"","title":"MAPF"},{"content":"","date":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"","date":null,"permalink":"/tags/research/","section":"Tags","summary":"","title":"research"},{"content":"","date":null,"permalink":"/tags/xmapf/","section":"Tags","summary":"","title":"XMAPF"},{"content":"","date":null,"permalink":"/tags/tryhackme/","section":"Tags","summary":"","title":"TryHackMe"},{"content":"This is my attempt at TryHackMe\u0026rsquo;s OhSINT challenge. We are given a JPEG as a starting point.\nThe provided JPEG showing the default Windows XP desktop wallpaper What is this user\u0026rsquo;s avatar of? # By running examining the picture\u0026rsquo;s EXIF metadata, the following output tells that OWoodflint is a possible link:\n$ exiftool WindowsXP.jpg ExifTool Version Number : 12.16 File Name : WindowsXP.jpg Directory : . File Size : 229 KiB File Modification Date/Time : 2021:04:10 14:52:00+10:00 File Access Date/Time : 2021:04:10 14:51:59+10:00 File Inode Change Date/Time : 2021:04:10 14:52:08+10:00 File Permissions : rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg XMP Toolkit : Image::ExifTool 11.27 GPS Latitude : 54 deg 17\u0026#39; 41.27\u0026#34; N GPS Longitude : 2 deg 15\u0026#39; 1.33\u0026#34; W Copyright : OWoodflint Image Width : 1920 Image Height : 1080 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 1920x1080 Megapixels : 2.1 GPS Latitude Ref : North GPS Longitude Ref : West GPS Position : 54 deg 17\u0026#39; 41.27\u0026#34; N, 2 deg 15\u0026#39; 1.33\u0026#34; W The Twitter profile @OWoodflint has a cat in its avatar.\nAnswer: cat\nWhat city is this person in? # The GitHub user @OWoodfl1nt has a GitHub repository OWoodfl1nt/people_finder, and it\u0026rsquo;s README.md says: people_finder # Hi all, I am from London, I like taking photos and open source projects.\nFollow me on twitter: @OWoodflint\nThis project is a new social network for taking photos in your home town.\nProject starting soon! Email me if you want to help out: OWoodflint@gmail.com\nAnswer: London\nWhats the SSID of the WAP he connected to? # The Twitter profile @OWoodflint wrote in a Twitter status: From my house I can get free wifi ;D\nBssid: B4:5D:50:AA:86:41 - Go nuts!\n\u0026mdash; 0x00000000000000000000 (@OWoodflint) March 3, 2019 The website https://www.wigle.net/ tells us that the BSSID B4:5D:50:AA:86:41 has an SSID of UnileverWiFi. Answer: UnileverWiFi\nWhere has he gone on holiday? # According to Oliver Woodflint\u0026rsquo;s website: Im in New York right now, so I will update this site right away with new photos!\nAnswer: New York\nWhat is this persons password? # Inside to Oliver Woodflint\u0026rsquo;s website HTML code: \u0026lt;p style=\u0026#34;color: #ffffff;\u0026#34; class=\u0026#34;has-text-color\u0026#34;\u0026gt;pennYDr0pper.!\u0026lt;/p\u0026gt; Answer: pennYDr0pper.!\nReferences # Hammond, J. (2020). TryHackMe! OhSINT - METADATA \u0026amp; Research [YouTube Video]. In YouTube. https://youtu.be/oF0TQQmFu4w OWoodfl1nt. (2019, March 3). OWoodfl1nt/people_finder. GitHub. https://github.com/OWoodfl1nt/people_finder/blob/master/README.md OWoodflint. (2019, March 4). Twitter status. Twitter. https://twitter.com/OWoodflint/status/1102220421091463168 WiGLE.net. (2011). WiGLE: Wireless Network Mapping. wigle.net. https://www.wigle.net/ Woodflint, O. (2019, March 3). Oliver Woodflint Blog. Oliver Woodflint Blog; Oliver Woodflint Blog. https://oliverwoodflint.wordpress.com/author/owoodflint/ ","date":"2021-07-03","permalink":"/posts/tryhackme/ohsint/","section":"Posts","summary":"TryHackMe OhSINT open-source intelligence challenge","title":"TryHackMe OhSINT"},{"content":"","date":null,"permalink":"/tags/angstromctf/","section":"Tags","summary":"","title":"angstromCTF"},{"content":"","date":null,"permalink":"/posts/angstromctf/","section":"Posts","summary":"ångstromCTF solutions","title":"ångstromCTF"},{"content":"Prompt # Clam decided to return to classic cryptography and revisit the XOR cipher! Here\u0026rsquo;s some hex encoded cipher text:\nae27eb3a148c3cf031079921ea3315cd27eb7d02882bf724169921eb3a469920e07d0b883bf63c018869a5090e8868e331078a68ec2e468c2bf13b1d9a20ea0208882de12e398c2df60211852deb021f823dda35079b2dda25099f35ab7d218227e17d0a982bee7d098368f13503cd27f135039f68e62f1f9d3cea7c The key is 5 bytes long, and the flag is somewhere in the message.\nAnalysis # Assuming 2 hexadecimal digits are equivalent to 1 ASCII characters, a possible key can be found by XORing the ciphertext with the known 5-bytes long substring actf{.\nSolution # In an XOR Cipher, it is known that possible_key = ciphertext ^ known_cleartext. The python script attached:\nslices the ciphertext to all possible 5 characters-long (assuming 2 hexadecimal digits are equivalent to 1 ASCII characters) sections, computes possible_key = ciphertext ^ known_cleartext, for a known substring of actf{, expands the key to the ASCII length of the message, rotates the key to deal with cases where the known clear text is not in an index that is a multiple of the key length. Thanks to @Levon for this suggestion. recomputes the XOR to possibly decode the message and prints the possible message as ASCII. Initial Python Code # from typing import List from doctest import testmod from textwrap import wrap def xor(s: List[int], t: List[int]) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :param s: list of non-negative integers :param t: list of non-negative integers :return: XOR of the ith number of both lists \u0026#34;\u0026#34;\u0026#34; return [a ^ b for a, b in zip(s, t)] def expand_key(short_key: List[int], size: int) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :param short_key: list of non-negative integers :param size: positive integer :return: short_key * (size // len(short_key)) + short_key[:size - len(key_expanded)] \u0026gt;\u0026gt;\u0026gt; expand_key([1, 2, 3, 4, 5], 9) [1, 2, 3, 4, 5, 1, 2, 3, 4] \u0026#34;\u0026#34;\u0026#34; assert size \u0026gt; len(short_key) key_expanded = short_key * (size // len(short_key)) for ii in range(size - len(key_expanded)): key_expanded.append(short_key[ii]) return key_expanded ciphertext_text = input(\u0026#34;hex-encoded ciphertext: \u0026#34;) known_cleartext = input(\u0026#34;known cleartext (with length of key): \u0026#34;) hint = input(\u0026#34;hint (such as \u0026#39;flag\u0026#39;): \u0026#34;) cipher_ascii = [int(letter, 16) for letter in wrap(ciphertext_text, 2)] known_cleartext_ascii = [ord(letter) for letter in known_cleartext] for i in range(len(cipher_ascii) - len(known_cleartext)): key = xor(cipher_ascii[i:i + len(known_cleartext)], known_cleartext_ascii) expanded_key = expand_key(key, len(cipher_ascii)) message_ascii = xor(cipher_ascii, expanded_key) message_text = \u0026#34;\u0026#34;.join(map(chr, message_ascii)) if known_cleartext in message_text and hint in message_text: print(f\u0026#34;key: {key} (\u0026#39;{\u0026#39;\u0026#39;.join(map(chr, key))}\u0026#39;)\u0026#34;) print(f\u0026#34;message: {message_text}\u0026#34;) print() Improved Python Code # from typing import TypedDict, List from textwrap import wrap from pwn import xor class XORSolution(TypedDict): key: List[int] cleartext: str def decode_xor(ciphertext_hex: str, known_cleartext: str, hint: str) -\u0026gt; List[XORSolution]: output = [] cipher_ascii = bytes(int(letter, 16) for letter in wrap(ciphertext_hex, 2)) for i in range(len(cipher_ascii)): key = list(xor(cipher_ascii[i:i + len(known_cleartext)], known_cleartext.encode())) for ii in range(len(key)): rotated_key = key[-ii:] + key[:-ii] cleartext = str(xor(cipher_ascii, rotated_key))[2:-1] if known_cleartext in cleartext and hint in cleartext: output.append({\u0026#34;key\u0026#34;: rotated_key, \u0026#34;cleartext\u0026#34;: cleartext}) return output Python Script Output # A Python script that prints all valid solutions for the full ciphertext and the ciphertext without the first character: ciphertext_hex1 = \u0026#34;ae27eb3a148c3cf031079921ea3315cd27eb7d02882bf724169921eb3a469920e07d0b883bf63c018869a5090e8868e331078a68ec2e468c2bf13b1d9a20ea0208882de12e398c2df60211852deb021f823dda35079b2dda25099f35ab7d218227e17d0a982bee7d098368f13503cd27f135039f68e62f1f9d3cea7c\u0026#34; known_cleartext1 = \u0026#34;actf{\u0026#34; hint1 = \u0026#34;flag\u0026#34; for solution in decode_xor(ciphertext_hex1, known_cleartext1, hint1): print(f\u0026#34;key: {solution[\u0026#39;key\u0026#39;]})\u0026#34;) print(f\u0026#34;message: {solution[\u0026#39;cleartext\u0026#39;]}\u0026#34;) for solution in decode_xor(ciphertext_hex1[2:], known_cleartext1, hint1): print(f\u0026#34;key: {solution[\u0026#39;key\u0026#39;]})\u0026#34;) print(f\u0026#34;message: {solution[\u0026#39;cleartext\u0026#39;]}\u0026#34;) The output of the screen described immediately above: key: [237, 72, 133, 93, 102]) message: Congratulations on decrypting the message! The flag is actf{who_needs_aes_when_you_have_xor}. Good luck on the other crypto! key: [72, 133, 93, 102, 237]) message: ongratulations on decrypting the message! The flag is actf{who_needs_aes_when_you_have_xor}. Good luck on the other crypto! Flag: actf{who_needs_aes_when_you_have_xor}\nReferences # Szymański, Ł. (2021). ångstromCTF 2021: Exclusive Cipher. szymanski.ninja. https://szymanski.ninja/en/ctfwriteups/2021/angstromctf/exclusive-cipher/ ","date":"2021-05-31","permalink":"/posts/angstromctf/exclusive-cipher/","section":"Posts","summary":"ångstromCTF 2021 Exclusive Cipher challenge","title":"ångstromCTF Exclusive Cipher"},{"content":"","date":null,"permalink":"/tags/cryptography/","section":"Tags","summary":"","title":"cryptography"},{"content":"","date":null,"permalink":"/posts/tryhackme/","section":"Posts","summary":"TryHackMe write-ups","title":"TryHackMe"},{"content":"","date":null,"permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"Kotlin"},{"content":"","date":null,"permalink":"/tags/minecraft/","section":"Tags","summary":"","title":"Minecraft"},{"content":"My first attempt at building a Minecraft server plugin. This plugin adds the requirement that the player supplies the password (via a server command) before proper server interaction is allowed, and as long as the password isn’t provided, the currently-unauthorized player is blinded and immobile.\n","date":"2020-06-29","permalink":"https://github.com/AppleGamer22/sp\" target=\"_blank","section":"Projects","summary":"My first attempt at building a Minecraft server plugin.","title":"sp \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/ionic/","section":"Tags","summary":"","title":"Ionic"},{"content":"","date":null,"permalink":"/tags/nx/","section":"Tags","summary":"","title":"Nx"},{"content":"My previous attempt at building a full-stack social media scraper, which is built with Angular on the front-end, and Nest on the back-end.\n","date":"2019-09-30","permalink":"https://github.com/AppleGamer22/scr-web\" target=\"_blank","section":"Projects","summary":"My previous attempt at building a full-stack social media scraper, which is built with Angular on the front-end, and Nest on the back-end.","title":"scr-web \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"My previous attempt at building a CLI social media scraper, which is built with OCLIF.\n","date":"2019-04-18","permalink":"https://github.com/AppleGamer22/scr-cli\" target=\"_blank","section":"Projects","summary":"My previous attempt at building a CLI social media scraper, which is built with OCLIF.","title":"\u003ccode\u003escr-cli \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"Background # I\u0026rsquo;ve been programming and learning about computing since the age of 15, and I\u0026rsquo;ve been playing with Swift, JavaScript/TypeScript, Java/Kotlin, C/C++, Python, and nowadays I focus on Go. In addition, I am enthusiastic about open-source software (mainly in the Linux ecosystem), and maintain several personal projects on GitHub. In my personal projects, I like to use modern tools such as Docker, GoReleaser, GitHub Actions, Nix, Terraform, and Vagrant, as well as modern practices such as CI/CD.\nExperience # At the moment I\u0026rsquo;m studying a bachelor\u0026rsquo;s degree in computer science. So far I have some experience as source code contributor in a research project, and I\u0026rsquo;ve been a committee member in the Monash Cyber Security Club (colloquially known as MonSec), while fulfilling the roles of general representative, secretary, vice president and president from 2021 to 2023.\nMonSec \u0026amp; Monash University\u0026rsquo;s Faculty of IT Engaging with Secondary Schools Hobbies # In my spare time, I like to play the guitar and learn genres such as rock and blues.\nPlaying John Frusciante\u0026rsquo;s solo in Red Hot Chili Peppers\u0026rsquo; Soul to Squeeze ","date":null,"permalink":"/about/","section":"Omri Bornstein","summary":"My Background, Specialities, Hobbies","title":"About"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/ci/cd/","section":"Tags","summary":"","title":"CI/CD"},{"content":"My involvement with Monash Cyber Security Club (MonSec):\nCommittee Talks, presentations, workshops Capture The Flag events (CTFs) ","date":null,"permalink":"/tags/monsec/","section":"Tags","summary":"My involvement with Monash Cyber Security Club (MonSec):","title":"MonSec"},{"content":"Collected Information \u0026amp; Its Uses # I use Google Analytics1 to gauge the reach of my website, how people arrive here, and if they are engaged. For such analytics, I only collect the following non-personally identifiable information, and have no interest in collecting personally identifiable information.\nTrends \u0026amp; Events # I collect the following information to asses how engaging or interesting my write-ups are.\nNumber of users over time Number of views for each page Traffic acquisition by: Referral Direct link Organic social Organic search User interaction events such as: scrolling clicking downloading a file Demographics # I collect the following information to asses what optimisations I should add to the site, in order to serve all users in the best way possible.\nCountry Web browser Chrome/Chromium Firefox Safari Edge Android WebView Samsung Internet Operating system Linux Android macOS iOS Windows Type of device desktop mobile Screen resolution Information Disclosed to Outside Parties # I do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. However, non-personally identifiable visitor information may be provided to other parties for the purposes of analytics.\nThird-Party Links # Third party sites which are displayed on this site have separate and independent privacy policies. I therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, I seek to protect the integrity of my website and welcome any feedback about these sites.\nOnline Privacy Policy Only # This online privacy policy applies only to information collected through my website and not to information collected offline.\nYour Consent # By using my website, you consent to my website\u0026rsquo;s privacy policy.\nChanges to My Privacy Policy # If I decide to change my privacy policy, I will post those changes on this page.\nHow Google Collects \u0026amp; Processes Data: https://policies.google.com/technologies/partner-sites\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":null,"permalink":"/privacy/","section":"Omri Bornstein","summary":"Privacy Policy","title":"Privacy"},{"content":"","date":null,"permalink":"/talks/","section":"Talks \u0026 Publications","summary":"","title":"Talks \u0026 Publications"}]
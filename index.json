[{"content":"Do you know that your smartphone saves the location of your photos inside the file itself? Or that your image editing software declares that it processed your pictures? Even when most mainstream websites and static site generators wipe EXIF metadata before they expose your uploaded images, it is still important to understand what metadata can be stored inside your images. When you upload unprocessed pictures to a publicly-accessible server such as a website or a public git repository (on GitHub, GitLab, Gitea or self-hosted), making sure that no sensitive metadata that is is left for anybody on the internet to look at.\nCommand-line Interfaces # In case you want to wipe out all EXIF metadata from command-line as part of an automated image processing pipeline, or just for fun, exiftool is an awesome open-source command-line utility that makes it easy to edit EXIF (and other formats). For further details about other more granular toggles that I don\u0026rsquo;t cover here, please refer to the exiftool documentation.\nKeeping Adobe Colour Metadata # For some reason, Adobe chose to store some colouring information in the EXIF header of files that are produced by their software. In order to maintain visual detail but still remove the rest of the EXIF header, the -All= toggle can be used.\n# remove all EXIF data a except for the APP14 Adobe block exiftool -All= image.jpg Removing All Metadata # If you really want to remove all metadata, the -all= toggle should be used for more aggressive metadata cleaning.\n# remove all EXIF data exiftool -all= image.jpg Graphical Interfaces # Windows ","date":"2023-06-08","permalink":"/posts/exif/","section":"Posts","summary":"Clearing EXIF metadata with exiftool","title":"Clearing EXIF Metadata"},{"content":"","date":null,"permalink":"/tags/exif/","section":"Tags","summary":"","title":"EXIF"},{"content":"","date":null,"permalink":"/","section":"Omri Bornstein","summary":"","title":"Omri Bornstein"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/latex/","section":"Tags","summary":"","title":"LaTeX"},{"content":"Pre-requisites # VSCode (or any other compatible fork) James Yu\u0026rsquo;s LaTeX Workshop extension An installation of a LaTeX distribution (such as TeXLive) LuaLaTeX/LuaTeX (or your preferred LaTeX compiler) latexmk Settings # The following JSON code can be added to either the projects settings at .vscode/settings.json, or to the global settings at ~/.config/Code/User/settings.json such that LuaLaTeX is used to compile .tex files every time they are saved within VSCode.\n{ // ... \u0026#34;latex-workshop.latex.tools\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;lualatexmk\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;-synctex=1\u0026#34;, \u0026#34;-interaction=nonstopmode\u0026#34;, \u0026#34;-file-line-error\u0026#34;, \u0026#34;-lualatex\u0026#34;, \u0026#34;-outdir=%OUTDIR%\u0026#34;, \u0026#34;%DOC%\u0026#34; ] } ], \u0026#34;latex-workshop.latex.recipes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;lualatexmk\u0026#34;, \u0026#34;tools\u0026#34;: [ \u0026#34;lualatexmk\u0026#34;, ] } ], // ... } These settings can be further modified if you need to use multiple compilation steps in sequence, or if you want to use different compilation settings. I found latexmk to be immensely useful when a document should be compiled multiple times, especially when a single compilation produces metadata for a subsequent compilation.\nDisabling Automatic Compilation # In case you want to work on a .tex document, but you don\u0026rsquo;t VSCode to compile it for you every time you save it, you can override the global settings with the following JSON code, added to .vscode/settings.json.\n{ // ... \u0026#34;latex-workshop.latex.recipes\u0026#34;: [], \u0026#34;latex-workshop.latex.autoBuild.run\u0026#34;: \u0026#34;never\u0026#34;, // ... } ","date":"2023-05-13","permalink":"/posts/tex/vscode/","section":"Posts","summary":"Pre-requisites # VSCode (or any other compatible fork) James Yu\u0026rsquo;s LaTeX Workshop extension An installation of a LaTeX distribution (such as TeXLive) LuaLaTeX/LuaTeX (or your preferred LaTeX compiler) latexmk Settings # The following JSON code can be added to either the projects settings at .","title":"LaTeX Settings for VSCode"},{"content":"","date":null,"permalink":"/tags/tex/","section":"Tags","summary":"","title":"TeX"},{"content":"","date":null,"permalink":"/posts/tex/","section":"Posts","summary":"","title":"TeX \u0026 LaTeX"},{"content":"","date":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"VSCode"},{"content":"","date":null,"permalink":"/tags/dependabot/","section":"Tags","summary":"","title":"Dependabot"},{"content":"","date":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git"},{"content":"","date":null,"permalink":"/posts/git/","section":"Posts","summary":"","title":"Git"},{"content":"","date":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"GitHub"},{"content":"Pre-requisites # Create a new dependencies issue label on your GitHub repository. Ecosystems # Each package ecosystem can be added to the updates list in your .github/dependabot.yml file found at the root of your repository file tree with its own settings.\nGo # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: gomod directory: / schedule: interval: daily assignees: - AppleGamer22 reviewers: - AppleGamer22 commit-message: prefix: chore labels: - dependencies JavaScript \u0026amp; TypeScript # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: npm # ... Python # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: pip # ... Docker # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: docker # ... GitHub Actions # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: github-actions # ... Terraform # # yaml-language-server: $schema=https://json.schemastore.org/dependabot-2.0.json version: 2 updates: - package-ecosystem: terraform # ... ","date":"2023-04-14","permalink":"/posts/git/dependabot/","section":"Posts","summary":"GitHub Supply Chain Security with Dependabot","title":"GitHub Supply Chain Security with Dependabot"},{"content":"","date":"2023-03-22","permalink":"https://youtu.be/WXTVsIHrAKM\" target=\"_blank","section":"Talks","summary":"","title":"Introduction to Command-line Linux \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/kali/","section":"Tags","summary":"","title":"Kali"},{"content":"","date":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":"","date":null,"permalink":"/tags/youtube/","section":"Tags","summary":"","title":"YouTube"},{"content":"This document summarises how I use Charm\u0026rsquo;s vhs to capture and document command-line interactions.\nGeneral Configuration # I tend to like capturing my preferred shell, prompt and font, all of which can be configured in the header of a .tape file.\nOutput command.gif Set FontSize 18 Set Shell zsh # or \u0026#34;FiraCode Nerd Font\u0026#34; Set FontFamily \u0026#34;Fira Code\u0026#34; # Set Margin 1 # time for the shell to load Hide Type eval \u0026#34;$(starship init zsh)\u0026#34; Enter Sleep 1s Type clear Enter Show # or any other command Type neofetch Sleep 500ms Enter # more time might be required for more time-consuming processes Sleep 500ms Before generating the GIF, you need to have FFmpeg and ttyd installed.\nvhs \u0026lt; cassette.tape Examples # Tab Completion # Since vhs requires the pauses between operation to be precise, this assumption also applies in waiting for tab completions to appear on the screen. It is important to ensure that each operation is clearly captured, by having an appropriate amount of time where vhs waits for the shell to respond to the key presses.\nOutput starship.gif Set FontSize 18 Set Shell zsh Set FontFamily \u0026#34;Fira Code\u0026#34; Hide Type eval \u0026#34;$(starship init zsh)\u0026#34; Enter Sleep 1s Type clear Enter Show Type ls Enter Sleep 500ms Type hu Tab Sleep 1000ms Tab Sleep 500ms Enter Sleep 500ms Tab Sleep 500ms Tab Sleep 500ms Up Sleep 500ms Enter Sleep 500ms Enter Sleep 1000ms Type cat starship.tape Enter Sleep 1000ms My command-line prompt with tab completion Character Escaping # Commands with more arguments and special character should be surrounded by quotes to ensure correct parsing and execution by vhs.\nOutput starship.gif Set FontSize 18 Set Shell zsh Set FontFamily \u0026#34;Fira Code\u0026#34; Hide Type eval \u0026#34;$(starship init zsh)\u0026#34; Enter Sleep 1s Type clear Enter Show Type \u0026#34;goreleaser release --clean --snapshot --skip-publish\u0026#34; Enter Sleep 5s Type tree dist Enter Sleep 500ms GoReleaser running a non-production build ","date":"2023-03-12","permalink":"/posts/vhs/","section":"Posts","summary":"Capturing Commands as GIFs with VHS","title":"Capturing Commands as GIFs with VHS"},{"content":"","date":null,"permalink":"/tags/charm/","section":"Tags","summary":"","title":"Charm"},{"content":"","date":null,"permalink":"/tags/cli/","section":"Tags","summary":"","title":"CLI"},{"content":"","date":null,"permalink":"/tags/vhs/","section":"Tags","summary":"","title":"VHS"},{"content":"","date":null,"permalink":"/tags/hashicorp/","section":"Tags","summary":"","title":"HashiCorp"},{"content":"","date":null,"permalink":"/tags/vagrant/","section":"Tags","summary":"","title":"Vagrant"},{"content":"","date":null,"permalink":"/posts/vagrant/","section":"Posts","summary":"My Vagrant configurations","title":"Vagrant"},{"content":"","date":"2023-02-19","permalink":"https://monsec.io/posts/2023s1/\" target=\"_blank","section":"Talks","summary":"","title":"MonSec 2023 Semester 1 \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"My Monash Cyber Security Club (MonSec) talks/presentations/workshops and blog posts are listed here:\n","date":null,"permalink":"/talks/monsec/","section":"Talks","summary":"My MonSec talks/presentations/workshops and blog posts...","title":"Monash Cyber Security Club (MonSec)"},{"content":"","date":null,"permalink":"/tags/forensics/","section":"Tags","summary":"","title":"forensics"},{"content":"","date":null,"permalink":"/tags/nitectf/","section":"Tags","summary":"","title":"niteCTF"},{"content":"","date":null,"permalink":"/posts/nitectf/","section":"Posts","summary":"niteCTF solutions","title":"niteCTF"},{"content":"Prompt # The new Head of Crime Analytics is named - The Deep. The Deep addresses the Crime team and Cassandra brings cupcakes for the team. They fired most of the staff because of past tweets that were critical of Homelander. Homelander as paranoid as ever believes that the boys has yet another plan to take down Vought International. As one of the members from the few left behind it is upon your shoulders to crack down on the boys\u0026rsquo; plan to take down Vought by looking into the suspicious GitHub user who goes by the name sk1nnywh1t3k1d or face Homelander\u0026rsquo;s wrath.\nSolution # GitHub # The GitHub profile can be found at https://github.com/sk1nnywh1t3k1d. This GitHub user has only one repository with only 2 commits at https://github.com/sk1nnywh1t3k1d/chat-app. The first commit added a file named chat.txt that was deleted on the second commit at https://github.com/sk1nnywh1t3k1d/chat-app/commit/d830e9b9a9cd531b2677bad94b4a08d7a539738b#diff-d341c91ed9aff89bf6ea2d5fa7b245307f745a1e9374328e47c79f1529be627a. The commit also has author\u0026rsquo;s the email (hughiecampbell392@gmail.com), visible when viewing the verbose commit patch, by appending .patch to the commit URL. The chat.txt file mention the shortened URL https://bit.ly/voughtencrypted WAV # The previously-mentioned shortened URL leads to an audio file download: When the audio file is shown in Audacity\u0026rsquo;s Spectrogram, the following text (thguovdne hsals drawrof yl tod tib) can be seen: By reversing the message, the shortened URL (https://bit.ly/endvought) can be read:\n$ echo \u0026#34;thguovdne hsals drawrof yl tod tib\u0026#34; | rev bit dot ly forward slash endvought PNG # The previously-mentioned shortened URL leads to an image file download: The shredded red text looks like an email address, but since the email address looks like the one found in the commit metadata, I didn\u0026rsquo;t un-shred the picture. During the event, I had not idea how to continue from here, with the email address in hand. E-mail Address # I didn\u0026rsquo;t figure it out during the event, but once I had Hughie\u0026rsquo;s email address I could find his public Google calendar with the hyper link calendar.google.com/calendar/u/0/embed?src=hughiecampbell392@gmail.com. Additional intelligence could be gathered about the email address using tools such as EPIEOS. The Google ID of the email address could be gathered by initiating a Google Hangouts chat and inspecting the HTML at the recipient\u0026rsquo;s details. The only event during December 2022 has the flag niteCTF{v0ught_n33ds_t0_g0_d0wn}. ","date":"2022-12-24","permalink":"/posts/nitectf/boys/","section":"Posts","summary":"niteCTF 2022 Boys challenge","title":"niteCTF Boys"},{"content":"","date":null,"permalink":"/tags/osint/","section":"Tags","summary":"","title":"OSINT"},{"content":"This document summarises how I set-up my UNIX-like command-line environment (on Linux and macOS) for easier interaction with command-line interfaces (CLIs).\nzsh # Plug-ins # The syntax highlighting plug-in enables more descriptive colourings of commands, flag and strings. The history substring search plug-in enables easier history substring search with less keystrokes. Note: This is not commonly packaged in the primary repositories of Debian and Red Hat, which means that you\u0026rsquo;ll need to download the source from the above-mentioned upstream GitHub repository. The additional completion scripts plugin adds community-maintained zsh completion scripts for programs that don\u0026rsquo;t ship with them by default. Note: This is not commonly packaged in the primary repositories of Debian and Red Hat, which means that you\u0026rsquo;ll need to download the source from the above-mentioned upstream GitHub repository. Platform Installation Command Arch-based sudo pacman -S zsh-completions zsh-history-substring-search zsh-syntax-highlighting Debian-based sudo apt install zsh-syntax-highlighting Red Hat-based sudo dnf install zsh-syntax-highlighting macOS brew install zsh-completions zsh-history-substring-search zsh-syntax-highlighting The following code should be added to your ~/.zshrc file in order to use the history substring search and syntax highlighting plug-ins:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;linux-gnu\u0026#34;* ]]; then source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh elif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh fi Manual Page Colours # My manual page colour configuration is inspired by Kali\u0026rsquo;s default ~/.zshrc file:\nexport LESS_TERMCAP_mb=$\u0026#39;\\E[1;31m\u0026#39; export LESS_TERMCAP_md=$\u0026#39;\\E[1;36m\u0026#39; export LESS_TERMCAP_me=$\u0026#39;\\E[0m\u0026#39; export LESS_TERMCAP_so=$\u0026#39;\\E[01;33m\u0026#39; export LESS_TERMCAP_se=$\u0026#39;\\E[0m\u0026#39; export LESS_TERMCAP_us=$\u0026#39;\\E[1;32m\u0026#39; export LESS_TERMCAP_ue=$\u0026#39;\\E[0m\u0026#39; ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern) ZSH_HIGHLIGHT_STYLES[default]=none ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=cyan,bold ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=green,underline ZSH_HIGHLIGHT_STYLES[global-alias]=fg=magenta ZSH_HIGHLIGHT_STYLES[precommand]=fg=green,underline ZSH_HIGHLIGHT_STYLES[commandseparator]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=green,underline ZSH_HIGHLIGHT_STYLES[path]=underline ZSH_HIGHLIGHT_STYLES[path_pathseparator]= ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]= ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[command-substitution]=none ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=fg=magenta ZSH_HIGHLIGHT_STYLES[process-substitution]=none ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=fg=magenta ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=fg=magenta ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=fg=magenta ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=fg=yellow ZSH_HIGHLIGHT_STYLES[rc-quote]=fg=magenta ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=magenta ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=fg=magenta ZSH_HIGHLIGHT_STYLES[assign]=none ZSH_HIGHLIGHT_STYLES[redirection]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[comment]=fg=black,bold ZSH_HIGHLIGHT_STYLES[named-fd]=none ZSH_HIGHLIGHT_STYLES[numeric-fd]=none ZSH_HIGHLIGHT_STYLES[arg0]=fg=green ZSH_HIGHLIGHT_STYLES[bracket-error]=fg=red,bold ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold ZSH_HIGHLIGHT_STYLES[bracket-level-2]=fg=green,bold ZSH_HIGHLIGHT_STYLES[bracket-level-3]=fg=magenta,bold ZSH_HIGHLIGHT_STYLES[bracket-level-4]=fg=yellow,bold ZSH_HIGHLIGHT_STYLES[bracket-level-5]=fg=cyan,bold ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout Settings # The following commands set:\nnumber of commands saved to the history file. ability to use the up and down arrow keys to access the history interactively, like in BASH and to search for a prefix in history menu-style command completion the tab character is displayed as 4 spaces the cursor is displayed as a | character HISTSIZE=1000 SAVEHIST=1000 setopt INC_APPEND_HISTORY setopt SHARE_HISTORY setopt HIST_IGNORE_DUPS setopt HIST_IGNORE_ALL_DUPS setopt HIST_SAVE_NO_DUPS setopt HIST_REDUCE_BLANKS HISTFILE=~/.zsh_history autoload -Uz compinit \u0026amp;\u0026amp; compinit -i autoload -Uz bashcompinit \u0026amp;\u0026amp; bashcompinit -i zstyle \u0026#39;:completion:*\u0026#39; menu select if [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then zstyle \u0026#39;:completion:*:*:-command-:*:*\u0026#39; ignored-patterns \u0026#39;clean-diff\u0026#39; fi bindkey \u0026#39;^[[A\u0026#39; history-substring-search-up bindkey \u0026#39;^[[B\u0026#39; history-substring-search-down touch ~/.hushlogin tabs -4 echo -e -n \u0026#34;\\x1b[\\x35 q\u0026#34;; Completions # Azure CLI # Azure CLI\u0026rsquo;s and kompose\u0026rsquo;s Linux installation requires the following command to be added to ~/.zshrc file in order to enable command completion:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;linux-gnu\u0026#34;* ]]; then source /etc/bash_completion.d/azure-cli elif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then source $(brew --prefix)/etc/bash_completion.d/az fi HashiCorp CLIs # HashiCorp\u0026rsquo;s programs (excluding vagrant) require a set-up script to be run before their completions are exposed to the shell. Since terraform\u0026rsquo;s completion scripts are already shipped by default on Arch-based Linux distributions, I specifically run its completion script only on macOS.\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then complete -o nospace -C $(which terraform) terraform fi complete -o nospace -C $(which vault) vault complete -o nospace -C $(which nomad) nomad macOS # If you install your command-line tools with the Homebrew package manager, the following code snippet from their documentation1 should be added to the appropriate place in ~/.zshrc file.\nIn my case, the following configuration worked the best, since other tools (such as vagrant) keep the completions in other places:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then FPATH=\u0026#34;$(brew --prefix)/share/zsh/site-functions:$(brew --prefix)/share/zsh-completions:${FPATH}\u0026#34; fi Otherwise, this shorter FPATH extension would also work:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then FPATH=\u0026#34;$(brew --prefix)/share/zsh/site-functions:${FPATH}\u0026#34; fi Docker Desktop # By default, Docker Desktop doesn\u0026rsquo;t install the completion scripts to where zsh expects them to be installed on macOS. In order to resolve this, these scripts can be symbolically linked to the correct file system path, as shown on the Docker documentation2:\netc=/Applications/Docker.app/Contents/Resources/etc ln -s $etc/docker.zsh-completion $(brew --prefix)/share/zsh/site-functions/_docker ln -s $etc/docker-compose.zsh-completion $(brew --prefix)/share/zsh/site-functions/_docker-compose Core Utilities on macOS # I find the GNU core utilities more feature-rich than the BSD core utilities that are shipped with macOS. As a result, when I need the GNU core utilities on macOS, I install them with the Homebrew package manager by running: brew install coreutils binutils gnu-tar gnu-sed grep make. These utilities can be enabled from your ~/.zshrc file:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then PATH=\u0026#34;$(brew --prefix)/opt/coreutils/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/binutils/bin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/gnu-tar/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/gnu-sed/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/grep/libexec/gnubin:$PATH\u0026#34; PATH=\u0026#34;$(brew --prefix)/opt/make/libexec/gnubin:$PATH\u0026#34; fi Prompt # I use the prompt program Starship, which enables my prompt to display additional information based on the files in the current directory, such as:\nGit branch Git status programming language version package version Starships displays the prompt based on a TOML configuration file stored at ~/.config/starship.toml3. This file defines in which order the information is displayed in the prompt, and also how that information is displayed.\nformat = \u0026#34;\u0026#34;\u0026#34;\\ $time\\ $username\\ $hostname\\ $directory\\ $git_branch\\ $git_commit\\ $git_state\\ $git_status\\ $package\\ $nodejs\\ $python\\ $golang\\ $java\\ $line_break\\ $cmd_duration\\ $character\\ \u0026#34;\u0026#34;\u0026#34; add_newline = false [time] format = \u0026#34;[$time]($style) \u0026#34; disabled = false use_12hr = true style = \u0026#34;blue bold\u0026#34; [character] success_symbol = \u0026#34;[\\\\$](bold green)\u0026#34; error_symbol = \u0026#34;[\\\\$](bold red) \u0026#34; [cmd_duration] format = \u0026#34;[$duration](bold yellow) \u0026#34; [hostname] format = \u0026#34;on [$hostname]($style) \u0026#34; ssh_only = false disabled = false style = \u0026#34;green bold\u0026#34; [username] format = \u0026#34;via [$user]($style) \u0026#34; disabled = false show_always = true style_user = \u0026#34;red bold\u0026#34; style_root = \u0026#34;red bold\u0026#34; [directory] format = \u0026#34;in [$path]($style) \u0026#34; disabled = false style = \u0026#34;yellow bold\u0026#34; Don\u0026rsquo;t forget to append Starship\u0026rsquo;s initialisation command to your ~/.zshrc file:\neval \u0026#34;$(starship init zsh)\u0026#34; GIF Demonstration # The following GIF was made using vhs with this hyperlinked .tape file:\nA GIF showing my command-line shell prompt configuration Aliases # The following aliases are useful if you stick with the default BSD core utilities of macOS:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then alias ls=\u0026#39;ls -G\u0026#39; alias rm=\u0026#39;rm -i\u0026#39; fi These aliases are useful for a more convenient and colourful command-line experience:\nif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;linux-gnu\u0026#34;* ]]; then alias open=\u0026#39;xdg-open $1 2\u0026gt; /dev/null\u0026#39; elif [[ \u0026#34;$OSTYPE\u0026#34; == \u0026#34;darwin\u0026#34;* ]]; then alias python=\u0026#34;$(brew --prefix)/bin/python3\u0026#34; alias python3=\u0026#34;$(brew --prefix)/bin/python3\u0026#34; alias pip=\u0026#34;$(brew --prefix)/bin/pip3\u0026#34; alias pip3=\u0026#34;$(brew --prefix)/bin/pip3\u0026#34; alias tailscale=\u0026#34;/Applications/Tailscale.app/Contents/MacOS/Tailscale\u0026#34; fi alias ls=\u0026#39;ls --color\u0026#39; alias rm=\u0026#39;rm -iI --preserve-root\u0026#39; alias clear=\u0026#34;printf \u0026#39;\\33c\\e[3J\u0026#39;\u0026#34; alias la=\u0026#39;ls -AlhF\u0026#39; alias lh=\u0026#39;ls -lhF\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias ln=\u0026#39;ln -i\u0026#39; alias df=\u0026#39;df -h\u0026#39; alias chown=\u0026#39;chown --preserve-root\u0026#39; alias chmod=\u0026#39;chmod --preserve-root\u0026#39; alias chgrp=\u0026#39;chgrp --preserve-root\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; alias bc=\u0026#39;bc -l\u0026#39; alias gitkraken=\u0026#39;git log --graph --decorate --oneline\u0026#39; git # I use a ~/.gitconfig4 file to configure:\nmy author details cryptographic signatures auto-push new branches command-line editor more colourful output [user] name = Omri Bornstein email = omribor@gmail.com [commit] gpgSign = true [tag] gpgSign = true [push] autoSetupRemote = true [core] editor = nano [color] status = auto branch = auto interactive = auto diff = auto Font # Fira Code for programming-related ligatures. Nerd Fonts as fallback for specialised icons. My Visual Studio Code font family settings are descried below, with the integrated terminal\u0026rsquo;s font set to follow the editor\u0026rsquo;s:\n{ // ... \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;\u0026#39;Fira Code\u0026#39;, \u0026#39;FiraCode Nerd Font\u0026#39;, \u0026#39;Cascadia Code\u0026#39;, \u0026#39;JetBrains Mono\u0026#39;, Menlo, Monaco, \u0026#39;Courier New\u0026#39;, monospace\u0026#34;, \u0026#34;editor.fontLigatures\u0026#34;: true, \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;\u0026#34;, // ... } https://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://docs.docker.com/desktop/faqs/macfaqs/#zsh\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://starship.rs/config/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://git-scm.com/docs/git-config\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-10-21","permalink":"/posts/shell/","section":"Posts","summary":"My zsh configuration for Linux and macOS","title":"Command-line Shell Configuration"},{"content":"","date":null,"permalink":"/tags/macos/","section":"Tags","summary":"","title":"macOS"},{"content":"","date":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"shell"},{"content":"","date":null,"permalink":"/tags/unix/","section":"Tags","summary":"","title":"UNIX"},{"content":"","date":null,"permalink":"/tags/zsh/","section":"Tags","summary":"","title":"zsh"},{"content":"","date":null,"permalink":"/tags/c/","section":"Tags","summary":"","title":"C"},{"content":"","date":"2022-10-14","permalink":"https://youtu.be/oc_Ndi7p3Eg\" target=\"_blank","section":"Talks","summary":"","title":"Introduction to Steganography \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/steganography/","section":"Tags","summary":"","title":"steganography"},{"content":"","date":null,"permalink":"/tags/downunderctf/","section":"Tags","summary":"","title":"DownUnderCTF"},{"content":"Prompt # Cheers for that, I\u0026rsquo;m assuming you\u0026rsquo;ve worked out that I\u0026rsquo;m YouTuber\u0026hellip; What\u0026rsquo;s my channel name?\nNote: This challenge assumes you have solved Honk Honk before attempting.\nSolution # Search for 23HONK on YouTube The first result from the Mighty Car Mods channel features a NSW vehicle registration plate of 23HONK: Flag: DUCTF{MightyCarMods}\n","date":"2022-09-23","permalink":"/posts/downunderctf/does_it_fit_my_ctf/","section":"Posts","summary":"DownUnderCTF 2022 Does It Fit My CTF challenge","title":"DownUnderCTF Does It Fit My CTF?"},{"content":"Prompt # I\u0026rsquo;m shocking when it comes to remembering when my car\u0026rsquo;s CTP is up\u0026hellip;can you let me know the exact date (DD/MM/YYYY) when it\u0026rsquo;s due? My rego is 23HONK.\nSolution # Go to NSW Vehicle Registration Check Search for 23HONK Flag: DUCTF{19/07/2023}\nFurther Information # About the Vehicle # Key Value Make NISSAN Model MARCH 3 DOOR TURBO Colour WHITE Shape SEDAN Manufacture year 1992 Tare weight 740 kg ","date":"2022-09-23","permalink":"/posts/downunderctf/honk_honk/","section":"Posts","summary":"DownUnderCTF 2022 Honk Honk challenge","title":"DownUnderCTF Honk Honk"},{"content":"Prompt # Have you joined the DUCTF Discord yet? There are some spicy memes, a certified memer has posted one that will give you a flag!\nSolution # The following GIF was recovered from the memes channel:\nFlag: DUCTF{G'day_mates_this'll_be_a_cracka}\n","date":"2022-09-23","permalink":"/posts/downunderctf/discord/","section":"Posts","summary":"DownUnderCTF 2022 Discord challenge","title":"DownUnderCTF Discord"},{"content":" 2022 Certificate ","date":null,"permalink":"/posts/downunderctf/","section":"Posts","summary":"DownUnderCTF solutions","title":"DownUnderCTF"},{"content":"","date":"2022-08-28","permalink":"https://monsec.io/resources/kali/\" target=\"_blank","section":"Posts","summary":"","title":"Kali Linux Configuration \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/virtualbox/","section":"Tags","summary":"","title":"VirtualBox"},{"content":"","date":null,"permalink":"/tags/reversing/","section":"Tags","summary":"","title":"reversing"},{"content":"","date":null,"permalink":"/posts/shell_ctf/","section":"Posts","summary":"SHELL CTF solutions","title":"SHELL CTF"},{"content":"Prompt # Dragonairre, the dragon with the hexadecimal head has attacked the village to take revenge on his last defeat, we need to get the ultimate weapon.\nAnalysis # $ ./vault Help us defeat the dragon!! Enter the code:22 wron..aaaaaahhhhhhhh The decompiled code reveals that the hexadecimal number 0x10f2c, or the decimal number 69420 (nice) is the code the program requires. My attempt at rewriting the main function based on the above-mentioned decompilation is shown below:\nint main() { printf(\u0026#34;Help us defeat the dragon!! Enter the code:\u0026#34;); int code; scanf(\u0026#34;%d\u0026#34;, \u0026amp;code); if (code == 0x10f2c) { printf(\u0026#34;Yeahh!!,we did it,We defeated the dragon.Thanks for your help here\u0026#39;s your reward : %s\u0026#34;, flag); } else if (code == 0x45) { printf(\u0026#34;Nice,but this is not the code :(.\u0026#34;); } else if (code != 0x1a4) { printf(\u0026#34;wron..aaaaaahhhhhhhh\u0026#34;); } else { printf(\u0026#34;Bruh!! Seriously?\u0026#34;); } return 0; } Solution # After the supplying the expected code in decimal form, a flag-like output is introduced:\n$ ./vault Help us defeat the dragon!! Enter the code:69420 Yeahh!!,we did it,We defeated the dragon.Thanks for your help here\u0026#39;s your reward : SHELLCTF{5348454c4c4354467b31355f523376337235316e675f333473793f7d} However, the real flag is hexadecimally-encoded within the fake one, which is decoded with pwn unhex below:\n$ echo \u0026#34;5348454c4c4354467b31355f523376337235316e675f333473793f7d\u0026#34; | pwn unhex SHELLCTF{15_R3v3r51ng_34sy?} ","date":"2022-08-12","permalink":"/posts/shell_ctf/how_to_defeat_a_dragon/","section":"Posts","summary":"SHELL CTF 2022 How to Defeat a Dragon challenge","title":"SHELL CTF How to Defeat a Dragon"},{"content":"","date":null,"permalink":"/tags/shell_ctf/","section":"Tags","summary":"","title":"SHELL_CTF"},{"content":"","date":null,"permalink":"/tags/uactf/","section":"Tags","summary":"","title":"UACTF"},{"content":"","date":null,"permalink":"/posts/uactf/","section":"Posts","summary":"","title":"UACTF"},{"content":"Prompt # I didn\u0026rsquo;t know that strings was a command until way later LMAO. ¯\\_(ツ)_/¯\nSolution # As the name suggests, this challenge\u0026rsquo;s purpose is to jump-start the reversing category. I decided to start the challenge by following the prompt and printing the ASCII strings the binary contains, and filter for the flag format.\n$ strings sanity-check | grep \u0026#34;UACTF\u0026#34; UACTF{N3V3R_G0NN4_L37_Y0U_D0WN} ","date":"2022-07-30","permalink":"/posts/uactf/sanity-check/","section":"Posts","summary":"UACTF 2022 Sanity Check challenge","title":"UACTF Sanity Check"},{"content":"","date":null,"permalink":"/tags/congo/","section":"Tags","summary":"","title":"Congo"},{"content":"","date":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"CSS"},{"content":"","date":null,"permalink":"/tags/fonts/","section":"Tags","summary":"","title":"fonts"},{"content":"","date":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"HTML"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"This document summarises how I set-up this website\u0026rsquo;s layout, fonts and typesetting. As a result, I highly recommend the Congo theme for the Hugo static site generator due to its layout, styling and extensibility.\nAdditions to Congo # I added some features because I\u0026rsquo;m not pleased with how Hugo\u0026rsquo;s shortcode syntax prevents some content from being rendered correctly on external Markdown platforms such as GitHub and GitLab.\nThe conditional loading of KaTeX and Mermaid is possible because of the modified head.html partial template that calls to the extend-head.html partial template with global context (with {{partial \u0026quot;extend-head.html\u0026quot; $}}) instead of configuration file context (with {{partial \u0026quot;extend-head.html\u0026quot; .Site}}).\nKaTeX # The following layouts/partials/extend-head.html code is based on this comment from the Congo Theme discussion board, and is also based on this file from Congo Theme\u0026rsquo;s codebase.\n{{if $.Params.math}} {{$katexCSS := resources.Get \u0026#34;lib/katex/katex.min.css\u0026#34;}} {{$katexCSS := $katexCSS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;link type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{$katexCSS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexCSS.Data.Integrity}}\u0026#34;\u0026gt; {{$katexJS := resources.Get \u0026#34;lib/katex/katex.min.js\u0026#34;}} {{$katexJS := $katexJS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer src=\u0026#34;{{$katexJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{$katexRenderJS := resources.Get \u0026#34;lib/katex/auto-render.min.js\u0026#34;}} {{$katexRenderJS := $katexRenderJS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer src=\u0026#34;{{$katexRenderJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexRenderJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{$katexFonts := resources.Match \u0026#34;lib/katex/fonts/*\u0026#34;}} {{range $katexFonts}} \u0026lt;!-- {{.RelPermalink}} --\u0026gt; {{end}} \u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { for (const p of document.querySelectorAll(\u0026#34;p\u0026#34;)) { if (/\\$\\$.*\\$\\$/g.test(p.innerText) \u0026amp;\u0026amp; p.hasChildNodes()) { for (const child of p.children) { if (child.tagName === \u0026#34;EM\u0026#34;) { const textNode = document.createTextNode(`_${child.innerText}_`); p.replaceChild(textNode, child); } } } } renderMathInElement(document.body, { delimiters: [ { left: \u0026#34;$$\u0026#34;, right: \u0026#34;$$\u0026#34;, display: true }, { left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false }, ], preProcess: math =\u0026gt; math.replaceAll(\u0026#34; \\\\\\n\u0026#34;, \u0026#34; \\\\\\\\\\n\u0026#34;), throwOnError: false }); }); \u0026lt;/script\u0026gt; {{end}} This change makes the KaTeX CSS and JavaScript files to load by default, and it also enables the single $ delimiter to be used with less future configuration.\nResult # With these configurations added, graphically-complex inline math expressions such as the following can be rendered:\nA second order polynomial euqation can be solved with the formula $\\displaystyle x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$ for a quadratic equation of the form $ax^2 + bx + c = 0$, for all $a \\neq 0$. On a spherical surface, the area of a triangle with angles $\\alpha$, $\\beta$ and $\\gamma$ (all measured in radians) is described by the formula $A_t = r^2(\\alpha + \\beta + \\gamma - \\pi)$, when $r$ is the radius of the sphere. Binet\u0026rsquo;s Formula for calculating arbitrary Fibonacci numbers states that $\\displaystyle F_n = \\frac{\\phi^n - (-\\phi)^{-n}}{\\sqrt{5}}$, when $\\displaystyle \\phi = \\frac{1 + \\sqrt{5}}{2}$. The integral of a polynomial of degree $n \\neq -1$ can be calculated by the formula $\\displaystyle \\int x^n dx = \\frac{x^{n + 1}}{n + 1} + C$ In addition, blocks of multi-line mathematical expressions can be rendered:\n$$ \\begin{align*} x \u0026amp;= \\frac{1}{x - 1} \u0026amp; \\text{definition of } \\phi \\ x(x - 1) \u0026amp;= 1 \u0026amp; \\times (x - 1) \\ x^2 - x \u0026amp;= 1 \u0026amp; a(b \\pm c) = ab \\pm ac \\ x^2 - x - 1 \u0026amp;= 0 \u0026amp; -1 \\ x \u0026amp;= \\frac{-(-1) \\pm \\sqrt{(-1)^2 - 4 \\cdot (-1)}}{2} \u0026amp; \\text{using } x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\ \u0026amp;\u0026amp; \\text{when } ax^2 + bx +c = 0 \\wedge a \\neq 0 \\ \u0026amp;= \\frac{1 \\pm \\sqrt{1 + 4}}{2} \u0026amp; \\text{simplification} \\ \u0026amp;= \\frac{1 \\pm \\sqrt{5}}{2} \u0026amp; \\text{simplification} \\end{align*} $$\nDue to Hugo\u0026rsquo;s use of the \\ character for text escaping, the preProcess1 function is required in order to correctly render the $\\TeX$ source code as it was intended to be rendered. Moreover, the align* environment seems to be the most compatible between KaTeX and MathJax.\nTechnical Diagrams # The following layouts/partials/extend-head.html code is based on Docsy\u0026rsquo;s diagram support, and implemented similarly to Docsy\u0026rsquo;s implementation, and Congo\u0026rsquo;s implementation, the theme settings are based on Mermaid\u0026rsquo;s documentation.\n{{if .Params.diagrams}} {{$mermaidLib := resources.Get \u0026#34;lib/mermaid/mermaid.min.js\u0026#34;}} {{$mermaidConfig := resources.Get \u0026#34;js/mermaid.js\u0026#34;}} {{$mermaidConfig := $mermaidConfig | resources.Minify}} {{$mermaidJS := slice $mermaidLib $mermaidConfig | resources.Concat \u0026#34;js/mermaid.bundle.js\u0026#34; | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{$mermaidJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$mermaidJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; /** * @type {string} color an RGB tuple that represents a colour in CSS * @returns an RGB CSS function form of the variable */ function tuple2RGB(color) { return `rgb(${getComputedStyle(document.documentElement).getPropertyValue(color)})`; } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { const diagrams = document.querySelectorAll(\u0026#34;code.language-mermaid\u0026#34;); let hasDiagram = diagrams.length \u0026gt; 0; if (!hasDiagram) return; for (const diagram of diagrams) { const text = diagram.textContent; const pre = document.createElement(\u0026#34;pre\u0026#34;); pre.classList.add(\u0026#34;mermaid\u0026#34;); pre.textContent = text; diagram.parentElement.replaceWith(pre); } const colorScheme = window.matchMedia(\u0026#34;(prefers-color-scheme: dark)\u0026#34;); colorScheme.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; location.reload()); let scheme = localStorage.getItem(\u0026#34;appearance\u0026#34;); if (scheme === null) { scheme = colorScheme.matches ? \u0026#34;dark\u0026#34; : \u0026#34;light\u0026#34;; } const textColor = scheme === \u0026#34;dark\u0026#34; ? \u0026#34;white\u0026#34; : \u0026#34;black\u0026#34;; mermaid.initialize({ theme: \u0026#34;base\u0026#34;, themeVariables: { background: tuple2RGB(\u0026#34;--color-neutral\u0026#34;), primaryColor: tuple2RGB(\u0026#34;--color-primary-200\u0026#34;), secondaryColor: tuple2RGB(\u0026#34;--color-secondary-200\u0026#34;), tertiaryColor: tuple2RGB(\u0026#34;--color-neutral-100\u0026#34;), primaryBorderColor: tuple2RGB(\u0026#34;--color-primary-400\u0026#34;), secondaryBorderColor: tuple2RGB(\u0026#34;--color-secondary-400\u0026#34;), tertiaryBorderColor: tuple2RGB(\u0026#34;--color-neutral-400\u0026#34;), lineColor: tuple2RGB(\u0026#34;--color-neutral-600\u0026#34;), textColor: textColor, loopTextColor: textColor, actorTextColor: textColor, mainBkg: (() =\u0026gt; { switch (scheme === \u0026#34;dark\u0026#34;) { case true: return tuple2RGB(\u0026#34;--color-neutral-800\u0026#34;); case false: return tuple2RGB(\u0026#34;--color-neutral\u0026#34;); } })(), fontFamily: \u0026#34;ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,helvetica neue,Arial,noto sans,sans-serif\u0026#34;, fontSize: \u0026#34;16px\u0026#34; } }); document.querySelector(\u0026#34;button#appearance-switcher-0\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; location.reload()); }); \u0026lt;/script\u0026gt; {{end}} The following CSS was added to assets/css/custom.css, in order to make the diagram\u0026rsquo;s background colour transparent.\npre.mermaid { background-color: transparent !important; } Result # With these configurations added, diagrams such as the one below can be rendered:\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! Changes to Congo # I was not completely satisfied with some of the styling of the default Congo theme, but luckily, it supports extensive customisations.\nCSS # Horizontal Scrolling # The following CSS was added to assets/css/custom.css in order to disable horizontal scrolling.\nThe single-line width of HTML a tags HTML tags is capped at the screen width. Horizontal scroll is disabled on the HTML body scope. body { overflow-x: hidden; } a { max-width: 100vw !important; word-wrap: break-word !important; } In order to render multi-line math expressions correctly in small-width screens, the following CSS code was added to assets/css/custom.css:\n@media (max-width: 640px) { span.katex-display \u0026gt; * { font-size: 0.65rem !important; } } In order to ensure search results don\u0026rsquo;t overflow the intended width, the maximum width is restricted accordingly with following CSS code was added to assets/css/custom.css:\n#search-results \u0026gt; li \u0026gt; a \u0026gt; * { max-width: calc(100% - 1.5rem) !important; word-wrap: break-word !important; } In order to ensure that embedded YouTube videos stay withing the width of a mobile screen, the following CSS code was added to assets/css/custom.css:\niframe { max-width: 100%; } Fixed-Width Font # The following CSS was added to assets/css/custom.css (based on this Stack Overflow comment) in order to set Fira Code/Cascadia Code (or the OS\u0026rsquo;s default) as the fixed-width font, used in code snippets.\n@font-face { font-family: \u0026#39;Fira Code\u0026#39;; src: local(\u0026#39;FiraCode-Regular\u0026#39;), url(\u0026#39;/FiraCode-Regular.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;); } code { font-family: \u0026#39;Cascadia Code\u0026#39;, \u0026#39;Fira Code\u0026#39;, monospace !important; } Result # Multi-character syntax tokens such as :=, ++, != and \u0026lt;- should be rendered in a more graphic manner.\nfunc f() { q := make(chan int) for i := 1; i \u0026lt; 5; i++ { if i != 2 { q \u0026lt;- i } } } Backtick-less Inline Code Snippets # The following CSS was added to assets/css/custom.css in order to revert Congo Theme\u0026rsquo;s main.css that surrounds inline code snippets with backtick symbols.\n.prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::before { content: unset !important; } .prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::after { content: unset !important; } Quote-less Block Quote # The following CSS was added to assets/css/custom.css in order to revert Congo Theme\u0026rsquo;s main.css that surrounds block quote with literal quotes.\n.prose :where(blockquote p:first-of-type):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::before { content: unset !important; } .prose :where(blockquote p:last-of-type):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::after { content: unset !important; } Nested Unordered Lists # The following CSS was added to assets/css/custom.css in order to set the second nested unordered list item bullet style as a square instead of a circle\nul \u0026gt; li \u0026gt; ul { list-style-type: square !important; } Content Width # The following CSS was added to assets/css/custom.css in order to increase the content width (based on Congo Theme\u0026rsquo;s main.css):\n.max-w-7xl { max-width: 100rem !important; } .max-w-prose { max-width: 100ch !important; } The following CSS was added to assets/css/custom.css in order to decrease the spacing between the menu items (based on Congo Theme\u0026rsquo;s main.css):\n@media(min-width: 640px) { [dir=\u0026#34;rtl\u0026#34;] .prose ol \u0026gt; li, [dir=\u0026#34;ltr\u0026#34;] .ltr\\:sm\\:mr-7 { margin-right: 0.75rem !important; } } Colour Scheme # The following CSS was added to assets/css/schemes/fruit.css (based on Congo\u0026rsquo;s congo.css and fire.css) change the colour scheme primary and secondary colours from violate-fuchsia to orange-red.\n:root { --color-neutral: 255, 255, 255; /* Gray */ --color-neutral-50: 250, 250, 250; --color-neutral-100: 244, 244, 245; --color-neutral-200: 228, 228, 231; --color-neutral-300: 212, 212, 216; --color-neutral-400: 161, 161, 170; --color-neutral-500: 113, 113, 122; --color-neutral-600: 82, 82, 91; --color-neutral-700: 63, 63, 70; --color-neutral-800: 39, 39, 42; --color-neutral-900: 24, 24, 27; /* Orange */ --color-primary-50: 255, 247, 237; --color-primary-100: 255, 237, 213; --color-primary-200: 254, 215, 170; --color-primary-300: 253, 186, 116; --color-primary-400: 251, 146, 60; --color-primary-500: 249, 115, 22; --color-primary-600: 234, 88, 12; --color-primary-700: 194, 65, 12; --color-primary-800: 154, 52, 18; --color-primary-900: 124, 45, 18; /* Rose */ --color-secondary-50: 255, 241, 242; --color-secondary-100: 255, 228, 230; --color-secondary-200: 254, 205, 211; --color-secondary-300: 253, 164, 175; --color-secondary-400: 251, 113, 133; --color-secondary-500: 244, 63, 94; --color-secondary-600: 225, 29, 72; --color-secondary-700: 190, 18, 60; --color-secondary-800: 159, 18, 57; --color-secondary-900: 136, 19, 55; } Menu Header # The following CSS was added to assets/css/custom.css in order to show/hide the desktop or mobile menu header based on the width of the screen:\n@media (min-width: 700px) { #header-narrow { display: none !important; } .header-wide { display: block !important; } } /* header for narrow screens */ @media (max-width: 700px) { #header-narrow { display: block !important; } .header-wide { display: none !important; } li#header-narrow \u0026gt; label \u0026gt; div \u0026gt; ul { padding-top: 3rem !important; } } The HTML was inspired by a combination of Congo Theme\u0026rsquo;s basic and hamburger layouts. The HTML code is available at layouts/partials/header/custom.html.\nConfiguration # Hugo # The following YAML snippets are taken from my hugo.yml, and always start from the root level of the YAML tree.\nDependencies # I import the Congo library using Hugo Modules.\n# yaml-language-server: $schema=https://json.schemastore.org/hugo.json module: imports: - path: github.com/jpanther/congo/v2 Markup # Syntax highlighting is configured to enable the copy button. The table of contents renders every heading in order. # yaml-language-server: $schema=https://json.schemastore.org/hugo.json markup: highlight: noClasses: false goldmark: renderer: unsafe: true tableOfContents: startLevel: 1 endLevel: 6 Other # I set the base URL for GitHub Pages compatibility. I set the timezone, in order to prevent pages with \u0026ldquo;future\u0026rdquo; dates from not rendering immediately. Git\u0026rsquo;s metadata is used to determine when a document has been updated. Hugo outputs are configured in order to enable content search. # yaml-language-server: $schema=https://json.schemastore.org/hugo.json baseURL: https://applegamer22.github.io timeZone: Australia/Melbourne defaultContentLanguage: en title: Omri Bornstein enableGitInfo: true paginate: 15 summaryLength: 0 outputs: home: - HTML - RSS - JSON Congo # Metadata # Basic information about me and the website is configured such that browser citation plugins can get the correct information.\n# yaml-language-server: $schema=https://json.schemastore.org/hugo.json languages: en: languageName: English languageCode: en isoCode: en rtl: false dateFormat: \u0026#34;2006-01-02\u0026#34; weight: 1 title: Omri Bornstein description: Omri Bornstein\u0026#39;s personal website author: name: Omri Bornstein Menu # The menu links and their order are set-up as follows:\n# yaml-language-server: $schema=https://json.schemastore.org/hugo.json languages: en: menu: main: - name: About pageRef: about weight: 1 - name: Posts pageRef: posts weight: 2 - name: Talks pageRef: talks weight: 3 - name: Projects pageRef: projects weight: 4 - name: CV pageRef: cv weight: 5 - name: Tags pageRef: tags weight: 6 Articles # The following article metadata is shown: table of contents taxonomies word count date added/updated Git repository hyperlink # yaml-language-server: $schema=https://json.schemastore.org/hugo.json params: article: showBreadcrumbs: true showTableOfContents: true showTaxonomies: true showWordCount: true showEdit: true showDateUpdated: true editURL: https://github.com/AppleGamer22/applegamer22.github.io/tree/master/content Other # These configurations are in this section because they do not fit in a coherent category:\nColour scheme The code copying button is enabled on multi-line code blocks Content search is enabled Recent posts from the blog are shown in the homepage The homepage is rendered as profile configuration A custom menu header layout is used A theme switcher is shown in footer A table of contents is shown for every list page # yaml-language-server: $schema=https://json.schemastore.org/hugo.json params: colorScheme: fruit enableCodeCopy: true enableSearch: true mainSections: - \u0026#34;posts\u0026#34; homepage: layout: profile showRecent: true header: layout: custom footer: showAppearanceSwitcher: true list: showTableOfContents: true showBreadcrumbs: true https://katex.org/docs/autorender.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-07-13","permalink":"/posts/hugo/","section":"Posts","summary":"My changes, additions and set-up of this Hugo-Congo website","title":"Hugo \u0026 Congo Configuration"},{"content":"","date":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript"},{"content":"","date":null,"permalink":"/tags/markdown/","section":"Tags","summary":"","title":"Markdown"},{"content":"","date":null,"permalink":"/tags/typesetting/","section":"Tags","summary":"","title":"typesetting"},{"content":"","date":null,"permalink":"/tags/bootstrap/","section":"Tags","summary":"","title":"Bootstrap"},{"content":"","date":null,"permalink":"/tags/client/","section":"Tags","summary":"","title":"client"},{"content":"","date":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker"},{"content":"","date":null,"permalink":"/tags/full-stack/","section":"Tags","summary":"","title":"full-stack"},{"content":"","date":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go"},{"content":"","date":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects"},{"content":"A social media scraper that is interfaced via a server-side rendered HTML user interface (or a CLI), and is managed by a REST API and a NoSQL database.\nraker\u0026rsquo;s Logo References # The Raker Gopher is based on an original work by Renee French. Ueda, T. (2016, July 27). Gopher Vector Graphics. GitHub. https://github.com/golang-samples/gopher-vector Google. (2022, February 4). Google Chrome Icon. Google. https://www.google.com/chrome/whats-new/m100 ","date":"2022-05-08","permalink":"https://github.com/AppleGamer22/raker\" target=\"_blank","section":"Projects","summary":"A social media scraper that is interfaced via a server-side rendered HTML user interface (or a CLI), and is managed by a REST API and a NoSQL database.","title":"\u003ccode\u003eraker \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"","date":null,"permalink":"/tags/regex/","section":"Tags","summary":"","title":"regex"},{"content":"","date":null,"permalink":"/tags/server/","section":"Tags","summary":"","title":"server"},{"content":"","date":null,"permalink":"/tags/windows/","section":"Tags","summary":"","title":"Windows"},{"content":"A cross-platform file-watcher that can run a command after each file-system operation on a given files or simply wait once until a file is changed.\n","date":"2022-05-08","permalink":"https://github.com/AppleGamer22/stalk\" target=\"_blank","section":"Projects","summary":"A cross-platform file-watcher that can run a command after each file-system operation on a given files or simply wait once until a file is changed.","title":"\u003ccode\u003estalk \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"","date":null,"permalink":"/tags/utility/","section":"Tags","summary":"","title":"utility"},{"content":"","date":null,"permalink":"/tags/ghidra/","section":"Tags","summary":"","title":"Ghidra"},{"content":"","date":"2022-03-28","permalink":"https://youtu.be/893L13SxDUg\" target=\"_blank","section":"Talks","summary":"","title":"Reverse Engineering with Ghidra \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"A cross-platform re-implementation of the macOS utility caffeinate that keeps the screen turned on either until stopped, for a set duration of time or while another process still runs.\n","date":"2022-03-12","permalink":"https://github.com/AppleGamer22/cocainate\" target=\"_blank","section":"Projects","summary":"A cross-platform re-implementation of the macOS utility caffeinate that keeps the screen turned on either until stopped, for a set duration of time or while another process still runs.","title":"\u003ccode\u003ecocainate \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"A Discord bot for MonSec\u0026rsquo;s Discord server, that fetches statistics about competing Capture the Flag teams from CTFtime, and displays them in the Discord interface.\n","date":"2021-12-21","permalink":"https://github.com/monsec/ctftime-discord-bot\" target=\"_blank","section":"Projects","summary":"A Discord bot for MonSec\u0026rsquo;s Discord server, that fetches statistics about competing Capture the Flag teams from CTFtime, and displays them in the Discord interface.","title":"CTFtime Discord Bot \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/discord/","section":"Tags","summary":"","title":"Discord"},{"content":"","date":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++"},{"content":"As part of the FIT2082 unit, I contributed to an existing codebase, based on prior research by (Gange, Harabor and Stuckey, 2021) about Lazy CBS, their Multi-Agent Path Finding (MAPF) algorithm.\nI modified the Lazy CBS codebase such that the algorithm also outputs the final set of constraints that is used to rule out paths, such that the Lazy CBS is formally an Explainable Multi-Agent Path Finding (XMAPF) algorithm. I learned how to enable Python-to-C++ bindings, such that the compiled Lazy CBS codebase can be used as a Python-facing library for future projects. ","date":"2021-08-20","permalink":"https://github.com/AppleGamer22/FIT2082\" target=\"_blank","section":"Projects","summary":"Extending a Multi-Agent Path Finding (MAPF) algorithm","title":"FIT2082 Computer Science Research Project \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/mapf/","section":"Tags","summary":"","title":"MAPF"},{"content":"","date":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"","date":null,"permalink":"/tags/research/","section":"Tags","summary":"","title":"research"},{"content":"","date":null,"permalink":"/tags/xmapf/","section":"Tags","summary":"","title":"XMAPF"},{"content":"","date":null,"permalink":"/tags/tryhackme/","section":"Tags","summary":"","title":"TryHackMe"},{"content":"This is my attempt at TryHackMe\u0026rsquo;s OhSINT challenge. We are given a JPEG as a starting point.\nThe provided JPEG showing the default Windows XP desktop wallpaper What is this user\u0026rsquo;s avatar of? # By running examining the picture\u0026rsquo;s EXIF metadata, the following output tells that OWoodflint is a possible link:\n$ exiftool WindowsXP.jpg ExifTool Version Number : 12.16 File Name : WindowsXP.jpg Directory : . File Size : 229 KiB File Modification Date/Time : 2021:04:10 14:52:00+10:00 File Access Date/Time : 2021:04:10 14:51:59+10:00 File Inode Change Date/Time : 2021:04:10 14:52:08+10:00 File Permissions : rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg XMP Toolkit : Image::ExifTool 11.27 GPS Latitude : 54 deg 17\u0026#39; 41.27\u0026#34; N GPS Longitude : 2 deg 15\u0026#39; 1.33\u0026#34; W Copyright : OWoodflint Image Width : 1920 Image Height : 1080 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 1920x1080 Megapixels : 2.1 GPS Latitude Ref : North GPS Longitude Ref : West GPS Position : 54 deg 17\u0026#39; 41.27\u0026#34; N, 2 deg 15\u0026#39; 1.33\u0026#34; W The Twitter profile @OWoodflint has a cat in its avatar.\nAnswer: cat\nWhat city is this person in? # The GitHub user @OWoodfl1nt has a GitHub repository OWoodfl1nt/people_finder, and it\u0026rsquo;s README.md says: people_finder # Hi all, I am from London, I like taking photos and open source projects.\nFollow me on twitter: @OWoodflint\nThis project is a new social network for taking photos in your home town.\nProject starting soon! Email me if you want to help out: OWoodflint@gmail.com\nAnswer: London\nWhats the SSID of the WAP he connected to? # The Twitter profile @OWoodflint wrote in a Twitter status: From my house I can get free wifi ;D\nBssid: B4:5D:50:AA:86:41 - Go nuts!\n\u0026mdash; 0x00000000000000000000 (@OWoodflint) March 3, 2019 The website https://www.wigle.net/ tells us that the BSSID B4:5D:50:AA:86:41 has an SSID of UnileverWiFi. Answer: UnileverWiFi\nWhere has he gone on holiday? # According to Oliver Woodflint\u0026rsquo;s website: Im in New York right now, so I will update this site right away with new photos!\nAnswer: New York\nWhat is this persons password? # Inside to Oliver Woodflint\u0026rsquo;s website HTML code: \u0026lt;p style=\u0026#34;color: #ffffff;\u0026#34; class=\u0026#34;has-text-color\u0026#34;\u0026gt;pennYDr0pper.!\u0026lt;/p\u0026gt; Answer: pennYDr0pper.!\nReferences # Hammond, J. (2020). TryHackMe! OhSINT - METADATA \u0026amp; Research [YouTube Video]. In YouTube. https://youtu.be/oF0TQQmFu4w OWoodfl1nt. (2019, March 3). OWoodfl1nt/people_finder. GitHub. https://github.com/OWoodfl1nt/people_finder/blob/master/README.md OWoodflint. (2019, March 4). Twitter status. Twitter. https://twitter.com/OWoodflint/status/1102220421091463168 WiGLE.net. (2011). WiGLE: Wireless Network Mapping. wigle.net. https://www.wigle.net/ Woodflint, O. (2019, March 3). Oliver Woodflint Blog. Oliver Woodflint Blog; Oliver Woodflint Blog. https://oliverwoodflint.wordpress.com/author/owoodflint/ ","date":"2021-07-03","permalink":"/posts/tryhackme/ohsint/","section":"Posts","summary":"TryHackMe OhSINT open-source intelligence challenge","title":"TryHackMe OhSINT"},{"content":"","date":null,"permalink":"/tags/angstromctf/","section":"Tags","summary":"","title":"angstromCTF"},{"content":"","date":null,"permalink":"/posts/angstromctf/","section":"Posts","summary":"ångstromCTF solutions","title":"ångstromCTF"},{"content":"Prompt # Clam decided to return to classic cryptography and revisit the XOR cipher! Here\u0026rsquo;s some hex encoded cipher text:\nae27eb3a148c3cf031079921ea3315cd27eb7d02882bf724169921eb3a469920e07d0b883bf63c018869a5090e8868e331078a68ec2e468c2bf13b1d9a20ea0208882de12e398c2df60211852deb021f823dda35079b2dda25099f35ab7d218227e17d0a982bee7d098368f13503cd27f135039f68e62f1f9d3cea7c The key is 5 bytes long, and the flag is somewhere in the message.\nAnalysis # Assuming 2 hexadecimal digits are equivalent to 1 ASCII characters, a possible key can be found by XORing the ciphertext with the known 5-bytes long substring actf{.\nSolution # In an XOR Cipher, it is known that possible_key = ciphertext ^ known_cleartext. The python script attached:\nslices the ciphertext to all possible 5 characters-long (assuming 2 hexadecimal digits are equivalent to 1 ASCII characters) sections, computes possible_key = ciphertext ^ known_cleartext, for a known substring of actf{, expands the key to the ASCII length of the message, rotates the key to deal with cases where the known clear text is not in an index that is a multiple of the key length. Thanks to @Levon for this suggestion. recomputes the XOR to possibly decode the message and prints the possible message as ASCII. Initial Python Code # from typing import List from doctest import testmod from textwrap import wrap def xor(s: List[int], t: List[int]) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :param s: list of non-negative integers :param t: list of non-negative integers :return: XOR of the ith number of both lists \u0026#34;\u0026#34;\u0026#34; return [a ^ b for a, b in zip(s, t)] def expand_key(short_key: List[int], size: int) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :param short_key: list of non-negative integers :param size: positive integer :return: short_key * (size // len(short_key)) + short_key[:size - len(key_expanded)] \u0026gt;\u0026gt;\u0026gt; expand_key([1, 2, 3, 4, 5], 9) [1, 2, 3, 4, 5, 1, 2, 3, 4] \u0026#34;\u0026#34;\u0026#34; assert size \u0026gt; len(short_key) key_expanded = short_key * (size // len(short_key)) for ii in range(size - len(key_expanded)): key_expanded.append(short_key[ii]) return key_expanded ciphertext_text = input(\u0026#34;hex-encoded ciphertext: \u0026#34;) known_cleartext = input(\u0026#34;known cleartext (with length of key): \u0026#34;) hint = input(\u0026#34;hint (such as \u0026#39;flag\u0026#39;): \u0026#34;) cipher_ascii = [int(letter, 16) for letter in wrap(ciphertext_text, 2)] known_cleartext_ascii = [ord(letter) for letter in known_cleartext] for i in range(len(cipher_ascii) - len(known_cleartext)): key = xor(cipher_ascii[i:i + len(known_cleartext)], known_cleartext_ascii) expanded_key = expand_key(key, len(cipher_ascii)) message_ascii = xor(cipher_ascii, expanded_key) message_text = \u0026#34;\u0026#34;.join(map(chr, message_ascii)) if known_cleartext in message_text and hint in message_text: print(f\u0026#34;key: {key} (\u0026#39;{\u0026#39;\u0026#39;.join(map(chr, key))}\u0026#39;)\u0026#34;) print(f\u0026#34;message: {message_text}\u0026#34;) print() Improved Python Code # from typing import TypedDict, List from textwrap import wrap from pwn import xor class XORSolution(TypedDict): key: List[int] cleartext: str def decode_xor(ciphertext_hex: str, known_cleartext: str, hint: str) -\u0026gt; List[XORSolution]: output = [] cipher_ascii = bytes(int(letter, 16) for letter in wrap(ciphertext_hex, 2)) for i in range(len(cipher_ascii)): key = list(xor(cipher_ascii[i:i + len(known_cleartext)], known_cleartext.encode())) for ii in range(len(key)): rotated_key = key[-ii:] + key[:-ii] cleartext = str(xor(cipher_ascii, rotated_key))[2:-1] if known_cleartext in cleartext and hint in cleartext: output.append({\u0026#34;key\u0026#34;: rotated_key, \u0026#34;cleartext\u0026#34;: cleartext}) return output Python Script Output # A Python script that prints all valid solutions for the full ciphertext and the ciphertext without the first character: ciphertext_hex1 = \u0026#34;ae27eb3a148c3cf031079921ea3315cd27eb7d02882bf724169921eb3a469920e07d0b883bf63c018869a5090e8868e331078a68ec2e468c2bf13b1d9a20ea0208882de12e398c2df60211852deb021f823dda35079b2dda25099f35ab7d218227e17d0a982bee7d098368f13503cd27f135039f68e62f1f9d3cea7c\u0026#34; known_cleartext1 = \u0026#34;actf{\u0026#34; hint1 = \u0026#34;flag\u0026#34; for solution in decode_xor(ciphertext_hex1, known_cleartext1, hint1): print(f\u0026#34;key: {solution[\u0026#39;key\u0026#39;]})\u0026#34;) print(f\u0026#34;message: {solution[\u0026#39;cleartext\u0026#39;]}\u0026#34;) for solution in decode_xor(ciphertext_hex1[2:], known_cleartext1, hint1): print(f\u0026#34;key: {solution[\u0026#39;key\u0026#39;]})\u0026#34;) print(f\u0026#34;message: {solution[\u0026#39;cleartext\u0026#39;]}\u0026#34;) The output of the screen described immediately above: key: [237, 72, 133, 93, 102]) message: Congratulations on decrypting the message! The flag is actf{who_needs_aes_when_you_have_xor}. Good luck on the other crypto! key: [72, 133, 93, 102, 237]) message: ongratulations on decrypting the message! The flag is actf{who_needs_aes_when_you_have_xor}. Good luck on the other crypto! Flag: actf{who_needs_aes_when_you_have_xor}\nReferences # Szymański, Ł. (2021). ångstromCTF 2021: Exclusive Cipher. szymanski.ninja. https://szymanski.ninja/en/ctfwriteups/2021/angstromctf/exclusive-cipher/ ","date":"2021-05-31","permalink":"/posts/angstromctf/exclusive-cipher/","section":"Posts","summary":"ångstromCTF 2021 Exclusive Cipher challenge","title":"ångstromCTF Exclusive Cipher"},{"content":"","date":null,"permalink":"/tags/cryptography/","section":"Tags","summary":"","title":"cryptography"},{"content":"","date":null,"permalink":"/posts/tryhackme/","section":"Posts","summary":"TryHackMe write-ups","title":"TryHackMe"},{"content":"","date":null,"permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"Kotlin"},{"content":"","date":null,"permalink":"/tags/minecraft/","section":"Tags","summary":"","title":"Minecraft"},{"content":"My first attempt at building a Minecraft server plugin. This plugin adds the requirement that the player supplies the password (via a server command) before proper server interaction is allowed, and as long as the password isn’t provided, the currently-unauthorized player is blinded and immobile.\n","date":"2020-06-29","permalink":"https://github.com/AppleGamer22/sp\" target=\"_blank","section":"Projects","summary":"My first attempt at building a Minecraft server plugin.","title":"sp \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/angular/","section":"Tags","summary":"","title":"Angular"},{"content":"","date":null,"permalink":"/tags/ionic/","section":"Tags","summary":"","title":"Ionic"},{"content":"","date":null,"permalink":"/tags/nestjs/","section":"Tags","summary":"","title":"NestJS"},{"content":"","date":null,"permalink":"/tags/nx/","section":"Tags","summary":"","title":"Nx"},{"content":"My previous attempt at building a full-stack social media scraper, which is built with Angular on the front-end, and Nest on the back-end.\n","date":"2019-09-30","permalink":"https://github.com/AppleGamer22/scr-web\" target=\"_blank","section":"Projects","summary":"My previous attempt at building a full-stack social media scraper, which is built with Angular on the front-end, and Nest on the back-end.","title":"scr-web \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e"},{"content":"","date":null,"permalink":"/tags/typescript/","section":"Tags","summary":"","title":"TypeScript"},{"content":"My previous attempt at building a CLI social media scraper, which is built with OCLIF.\n","date":"2019-04-18","permalink":"https://github.com/AppleGamer22/scr-cli\" target=\"_blank","section":"Projects","summary":"My previous attempt at building a CLI social media scraper, which is built with OCLIF.","title":"\u003ccode\u003escr-cli \u003cspan title=\"Link to external site\" class=\"text-xs align-top cursor-default text-neutral-400 dark:text-neutral-500\"\u003e\u003cspan class=\"rtl:hidden\"\u003e\u0026#8599;\u003c/span\u003e\u003cspan class=\"ltr:hidden\"\u003e\u0026#8598;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e"},{"content":"I\u0026rsquo;ve been programming and learning about computing since the age of 15, and I\u0026rsquo;ve been playing with Swift, JavaScript/TypeScript, Java/Kotlin, C/C++, Python, and nowadays I focus on Go. In addition, I am enthusiastic about open-source software (mainly in the Linux ecosystem), and maintain several personal projects on GitHub. In my personal projects, I like to use modern tools such as Docker, GoReleaser, GitHub Actions, Terraform, and Vagrant, as well as modern practices such as CI/CD.\nAt the moment I\u0026rsquo;m studying a bachelor\u0026rsquo;s degree in computer science. So far I have some experience as source code contributor in a research project, and I\u0026rsquo;ve been a committee member in the Monash Cyber Security Club (colloquially known as MonSec), while fulfilling the roles of general representative, secretary, vice president and president from 2021 to 2023.\nMonSec \u0026amp; Monash University\u0026rsquo;s Faculty of IT Engaging with Secondary Schools In my spare time, I like to play the guitar and learn genres such as rock and blues.\nPlaying John Frusciante\u0026rsquo;s solo in Red Hot Chili Peppers\u0026rsquo; Soul to Squeeze ","date":null,"permalink":"/about/","section":"Omri Bornstein","summary":"My Background, Specialities, Hobbies","title":"About"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"My involvement with Monash Cyber Security Club (MonSec):\nCommittee Talks, presentations, workshops Capture The Flag events (CTFs) ","date":null,"permalink":"/tags/monsec/","section":"Tags","summary":"My involvement with Monash Cyber Security Club (MonSec):","title":"MonSec"},{"content":"Collected Information \u0026amp; Its Uses # I use Google Analytics1 to gauge the reach of my website, how people arrive here, and if they are engaged. For such analytics, I only collect the following non-personally identifiable information, and have no interest in collecting personally identifiable information.\nTrends \u0026amp; Events # I collect the following information to asses how engaging or interesting my write-ups are.\nNumber of users over time Number of views for each page Traffic acquisition by: Referral Direct link Organic social Organic search User interaction events such as: scrolling clicking downloading a file Demographics # I collect the following information to asses what optimisations I should add to the site, in order to serve all users in the best way possible.\nCountry Web browser Chrome/Chromium Firefox Safari Edge Android WebView Samsung Internet Operating system Linux Android macOS iOS Windows Type of device desktop mobile Screen resolution Information Disclosed to Outside Parties # I do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. However, non-personally identifiable visitor information may be provided to other parties for the purposes of analytics.\nThird-Party Links # Third party sites which are displayed on this site have separate and independent privacy policies. I therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, I seek to protect the integrity of my website and welcome any feedback about these sites.\nOnline Privacy Policy Only # This online privacy policy applies only to information collected through my website and not to information collected offline.\nYour Consent # By using my website, you consent to my website\u0026rsquo;s privacy policy.\nChanges to My Privacy Policy # If I decide to change my privacy policy, I will post those changes on this page.\nHow Google Collects \u0026amp; Processes Data: https://policies.google.com/technologies/partner-sites\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":null,"permalink":"/privacy/","section":"Omri Bornstein","summary":"Privacy Policy","title":"Privacy"},{"content":"","date":null,"permalink":"/talks/","section":"Talks","summary":"","title":"Talks"}]
[{"content":"","date":"July 13, 2022","permalink":"/tags/congo/","section":"Tags","summary":"","title":"congo"},{"content":"","date":"July 13, 2022","permalink":"/tags/css/","section":"Tags","summary":"","title":"css"},{"content":"","date":"July 13, 2022","permalink":"/tags/fonts/","section":"Tags","summary":"","title":"fonts"},{"content":"","date":"July 13, 2022","permalink":"/tags/html/","section":"Tags","summary":"","title":"html"},{"content":"","date":"July 13, 2022","permalink":"/tags/hugo/","section":"Tags","summary":"","title":"hugo"},{"content":"","date":"July 13, 2022","permalink":"/tags/javascript/","section":"Tags","summary":"","title":"javascript"},{"content":"","date":"July 13, 2022","permalink":"/tags/markdown/","section":"Tags","summary":"","title":"markdown"},{"content":"This document summarises how I set-up this website\u0026rsquo;s layout, fonts and typesetting. As a result, I highly recommend the Congo theme for the Hugo static site generator due to its layout, styling and extensibility.\nAdditions to Congo # I added some features because I\u0026rsquo;m not pleased with how Hugo\u0026rsquo;s Shortcode syntax prevents some content from being rendered correctly on external Markdown platforms such as GitHub and GitLab.\nKaTeX # The following layouts/partials/extend-head.html code is based this comment from the Congo Theme discussion board, and this file from Congo Theme\u0026rsquo;s codebase.\n{{$katexCSS := resources.Get \u0026#34;lib/katex/katex.min.css\u0026#34;}} {{$katexCSS := $katexCSS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;link type=\u0026#34;text/css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{$katexCSS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexCSS.Data.Integrity}}\u0026#34;\u0026gt; {{$katexJS := resources.Get \u0026#34;lib/katex/katex.min.js\u0026#34;}} {{$katexJS := $katexJS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer src=\u0026#34;{{$katexJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{$katexRenderJS := resources.Get \u0026#34;lib/katex/auto-render.min.js\u0026#34;}} {{$katexRenderJS := $katexRenderJS | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer src=\u0026#34;{{$katexRenderJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$katexRenderJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ $katexFonts := resources.Match \u0026#34;lib/katex/fonts/*\u0026#34; }} {{ range $katexFonts }} \u0026lt;!-- {{ .RelPermalink }} --\u0026gt; {{ end }} \u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { renderMathInElement(document.body, { delimiters: [ { left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true }, { left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false }, ], throwOnError: false }); }); \u0026lt;/script\u0026gt; This change makes the KaTeX CSS and JavaScript files to load by default, and it also enables the single $ delimiter to be used with less future configuration.\nResult # With these configurations added, graphically-complex inline math expressions such as the following can be rendered:\nA second order polynomial euqation can be solved with the formula $\\displaystyle x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$ for a quadratic equation of the form $ax^2 + bx + c = 0$, for all $a \\neq 0$. On a spherical surface, the area of a triangle with angles $\\alpha$, $\\beta$ and $\\gamma$ (all measured in radians) is described by the formula $A_t = r^2(\\alpha + \\beta + \\gamma - \\pi)$, when $r$ is the radius of the sphere. Binet\u0026rsquo;s Formula for calculating arbitrary Fibonacci numbers states that $\\displaystyle F_n = \\frac{\\phi^n - (-\\phi)^{-n}}{\\sqrt{5}}$, when $\\displaystyle \\phi = \\frac{1 + \\sqrt{5}}{2}$. The integral of a polynomial of degree $n \\neq -1$ can be calculated by the formula $\\displaystyle \\int x^n dx = \\frac{x^{n + 1}}{n + 1} + C$ In addition, blocks of multi-line mathematical expressions can be rendered:\n$$ \\begin{align*} x \u0026amp;= \\frac{1}{x - 1} \u0026amp; \\text{definition of } \\phi \\\\ x(x - 1) \u0026amp;= 1 \u0026amp; \\times (x - 1) \\\\ x^2 - x \u0026amp;= 1 \u0026amp; a(b \\pm c) = ab \\pm ac \\\\ x^2 - x - 1 \u0026amp;= 0 \u0026amp; -1 \\\\ x \u0026amp;= \\frac{-(-1) \\pm \\sqrt{(-1)^2 - 4 \\cdot (-1)}}{2} \u0026amp; \\text{using } x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\\\ \u0026amp;\u0026amp; \\text{when } ax^2 + bx +c = 0 \\wedge a \\neq 0 \\\\ \u0026amp;= \\frac{1 \\pm \\sqrt{1 + 4}}{2} \u0026amp; \\text{simplification} \\\\ \u0026amp;= \\frac{1 \\pm \\sqrt{5}}{2} \u0026amp; \\text{simplification} \\end{align*} $$\nDue to Hugo\u0026rsquo;s use of the \\ character for text escaping, the sequence \\\\\\ is required instead of \\\\ (at the source-code level) in order to correctly render a line break. Moreover, the align* environment seems to be the most compatible between KaTeX and MathJax. This change does not seem to affect $\\TeX$ rendering in other platforms.\nTechnical Diagrams # The following layouts/partials/extend-head.html code is based on Docsy\u0026rsquo;s diagram support, and implemented similarly to Docsy\u0026rsquo;s implementation, and Congo\u0026rsquo;s implementation, the theme settings are based on Mermaid\u0026rsquo;s documentation.\n{{$mermaidLib := resources.Get \u0026#34;lib/mermaid/mermaid.min.js\u0026#34;}} {{$mermaidConfig := resources.Get \u0026#34;js/mermaid.js\u0026#34;}} {{$mermaidConfig := $mermaidConfig | resources.Minify}} {{$mermaidJS := slice $mermaidLib $mermaidConfig | resources.Concat \u0026#34;js/mermaid.bundle.js\u0026#34; | resources.Fingerprint \u0026#34;sha512\u0026#34;}} \u0026lt;script defer type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{$mermaidJS.RelPermalink}}\u0026#34; integrity=\u0026#34;{{$mermaidJS.Data.Integrity}}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; /** * @type {string} color an RGB tuple that represents a colour in CSS * @returns an RGB CSS function form of the variable */ function tuple2RGB(color) { return `rgb(${getComputedStyle(document.documentElement).getPropertyValue(color)})`; } /** @returns text colour appropriate for colour theme */ function textColor() { switch (document.documentElement.classList.contains(\u0026#34;dark\u0026#34;)) { case true: return \u0026#34;white\u0026#34;; case false: return \u0026#34;black\u0026#34;; } } document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, () =\u0026gt; { for (const diagram of document.querySelectorAll(\u0026#34;code.language-mermaid\u0026#34;)) { const text = diagram.textContent; const pre = document.createElement(\u0026#34;pre\u0026#34;); pre.classList.add(\u0026#34;mermaid\u0026#34;); pre.textContent = text; diagram.parentElement.replaceWith(pre); } mermaid.initialize({ theme: \u0026#34;base\u0026#34;, themeVariables: { background: tuple2RGB(\u0026#34;--color-neutral\u0026#34;), primaryColor: tuple2RGB(\u0026#34;--color-primary-200\u0026#34;), secondaryColor: tuple2RGB(\u0026#34;--color-secondary-200\u0026#34;), tertiaryColor: tuple2RGB(\u0026#34;--color-neutral-100\u0026#34;), primaryBorderColor: tuple2RGB(\u0026#34;--color-primary-400\u0026#34;), secondaryBorderColor: tuple2RGB(\u0026#34;--color-secondary-400\u0026#34;), tertiaryBorderColor: tuple2RGB(\u0026#34;--color-neutral-400\u0026#34;), lineColor: tuple2RGB(\u0026#34;--color-neutral-600\u0026#34;), textColor: textColor(), loopTextColor: textColor(), primaryTextColor: \u0026#34;black\u0026#34;, fontFamily: \u0026#34;ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,helvetica neue,Arial,noto sans,sans-serif\u0026#34;, fontSize: \u0026#34;16px\u0026#34; } }); }); \u0026lt;/script\u0026gt; The following CSS was added to assets/css/custom.css, in order to make the diagram\u0026rsquo;s background colour transparent.\npre.mermaid { background-color: transparent !important; } Result # With these configurations added, diagrams such as the one below can be rendered:\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! Changes to Congo # I was not completely satisfied with some of the styling of the default Congo theme, but luckily, it supports extensive customisations.\nCSS # Horizontal Scroll on Small-Width Screens # The following CSS was added to assets/css/custom.css (based on Congo Theme\u0026rsquo;s main.css) in order to (indirectly) disable horizontal scrolling in small-width screens. It turns out that the horizontal scroll is enabled to to a HTML tag styling that did not limit their width to the screen width.\n@media (max-width: 640px) { a { max-width: 100vw !important; word-wrap: break-word !important; } } In order to render multi-line math expressions correctly in small-width screens, the following CSS code was added to assets/css/custom.css:\n@media (max-width: 640px) { span.katex-display \u0026gt; * { font-size: 0.65rem !important; } } Fixed-Width Font # The following CSS was added to assets/css/custom.css (based on this Stack Overflow comment) in order to set Fira Code/Cascadia Code (or the OS\u0026rsquo;s default) as the fixed-width font, used in code snippets.\n@font-face { font-family: \u0026#39;Fira Code\u0026#39;; src: local(\u0026#39;FiraCode-Regular\u0026#39;), url(\u0026#39;/FiraCode-Regular.ttf\u0026#39;) format(\u0026#39;truetype\u0026#39;); } code { font-family: \u0026#39;Cascadia Code\u0026#39;, \u0026#39;Fira Code\u0026#39;, monospace !important; } Result # Multi-character syntax tokens such as :=, ++, != and \u0026lt;- should be rendered in a more graphic manner.\nfunc main() { q := make(chan int) for i := 1; i \u0026lt; 5; i++ { if i != 2 { q \u0026lt;- i } } } Backtick-less Inline Code Snippets # The following CSS was added to assets/css/custom.css in order to revert Congo Theme\u0026rsquo;s main.css that surrounds inline code snippets with backtick symbols.\n.prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::before { content: unset !important; } .prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::after { content: unset !important; } Content Width # The following CSS was added to assets/css/custom.css in order to increase the content width. Based on Congo Theme\u0026rsquo;s main.css.\n.max-w-7xl { max-width: 100rem !important; } .max-w-prose { max-width: 100ch !important; } Colour Scheme # The following CSS was added to assets/css/schemes/fruit.css (based on Congo\u0026rsquo;s congo.css and fire.css) change the colour scheme primary and secondary colours from violate-fuchsia to orange-red.\n:root { --color-neutral: 255, 255, 255; /* Gray */ --color-neutral-50: 250, 250, 250; --color-neutral-100: 244, 244, 245; --color-neutral-200: 228, 228, 231; --color-neutral-300: 212, 212, 216; --color-neutral-400: 161, 161, 170; --color-neutral-500: 113, 113, 122; --color-neutral-600: 82, 82, 91; --color-neutral-700: 63, 63, 70; --color-neutral-800: 39, 39, 42; --color-neutral-900: 24, 24, 27; /* Orange */ --color-primary-50: 255, 247, 237; --color-primary-100: 255, 237, 213; --color-primary-200: 254, 215, 170; --color-primary-300: 253, 186, 116; --color-primary-400: 251, 146, 60; --color-primary-500: 249, 115, 22; --color-primary-600: 234, 88, 12; --color-primary-700: 194, 65, 12; --color-primary-800: 154, 52, 18; --color-primary-900: 124, 45, 18; /* Rose */ --color-secondary-50: 255, 241, 242; --color-secondary-100: 255, 228, 230; --color-secondary-200: 254, 205, 211; --color-secondary-300: 253, 164, 175; --color-secondary-400: 251, 113, 133; --color-secondary-500: 244, 63, 94; --color-secondary-600: 225, 29, 72; --color-secondary-700: 190, 18, 60; --color-secondary-800: 159, 18, 57; --color-secondary-900: 136, 19, 55; } Configuration # Hugo # The following YAML snippets are taken from my config.yml, and always start from the root level of the YAML tree.\nDependencies # I import the Congo library using Hugo Modules.\nmodule: imports: - path: github.com/jpanther/congo/v2 Markup # Syntax highlighting is configured to enable the copy button. The table of contents renders every heading in order. markup: highlight: noClasses: false tableOfContents: startLevel: 1 endLevel: 6 Other # I set the base URL for GitHub Pages compatibility. I set the timezone, in order to prevent pages with \u0026ldquo;future\u0026rdquo; dates from not rendering immediately. Hugo outputs are configured in order to enable content search. baseURL: https://applegamer22.github.io timeZone: Australia/Melbourne defaultContentLanguage: en title: Omri Bornstein outputs: home: - HTML - RSS - JSON Congo # Metadata # Basic information about me and the website is configured such that browser citation plugins can get the correct information.\nlanguages: en: languageName: English isoCode: en rtl: false weight: 1 title: Omri Bornstein description: Omri Bornstein\u0026#39;s personal website author: name: Omri Bornstein Menu # The menu links and their order are set-up as follows:\nlanguages: en: menu: main: - name: Blog pageRef: posts weight: 1 - name: Projects pageRef: projects weight: 2 - name: Tags pageRef: tags weight: 3 Articles # The following article metadata is shown: table of contents taxonomies word count date added/updated git repository hyperlink params: article: showBreadcrumbs: true showTableOfContents: true showTaxonomies: true showWordCount: true showEdit: true showDateUpdated: true editAppendPath: false editURL: https://github.com/AppleGamer22/applegamer22.github.io Other # These configurations are in this section because they do not fit in a coherent category:\nColour scheme The dark mode appearance is marked as preferred The code copying button is enabled on multi-line code blocks Content search is enabled Recent posts from the blog are shown in the homepage The homepage is rendered as profile configuration A table of contents is shown for every list page params: colorScheme: fruit defaultAppearance: dark enableCodeCopy: true enableSearch: true mainSections: - \u0026#34;posts\u0026#34; homepage: layout: profile showRecent: true list: showTableOfContents: true ","date":"July 13, 2022","permalink":"/posts/congo/","section":"Posts","summary":"This document summarises how I set-up this website\u0026rsquo;s layout, fonts and typesetting. As a result, I highly recommend the Congo theme for the Hugo static site generator due to its layout, styling and extensibility.\nAdditions to Congo # I added some features because I\u0026rsquo;m not pleased with how Hugo\u0026rsquo;s Shortcode syntax prevents some content from being rendered correctly on external Markdown platforms such as GitHub and GitLab.\nKaTeX # The following layouts/partials/extend-head.","title":"My Hugo \u0026 Congo Configuration"},{"content":"","date":"July 13, 2022","permalink":"/","section":"Omri Bornstein","summary":"","title":"Omri Bornstein"},{"content":"","date":"July 13, 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"July 13, 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"July 13, 2022","permalink":"/tags/tex/","section":"Tags","summary":"","title":"tex"},{"content":"","date":"July 13, 2022","permalink":"/tags/typesetting/","section":"Tags","summary":"","title":"typesetting"},{"content":"","date":"July 13, 2022","permalink":"/tags/yaml/","section":"Tags","summary":"","title":"yaml"},{"content":"Current Projects # Go # cocainate is a cross-platform re-implementation of the macOS utility caffeinate that keeps the screen turned on either until stopped, for a set duration of time or while another process still runs. stalk is a cross-platform file-watcher that can run a command after each file-system operation on a given file(s) or simply wait once until a file is changed. rake is a social media scraper that is interfaced via a server-side rendered HTML user interface (or a CLI), and is managed by a REST API and a NoSQL database. Other Projects # Research # As part of the FIT2082 unit, I contributed to an existing codebase, based on prior research by (Gange, Harabor and Stuckey, 2021) about Lazy CBS, their Multi-Agent Path Finding (MAPF) algorithm. The MAPF problem is a subset of the path finding research field, which presents the additional requirements of multiple agents, each with a unique pair of a source and a target, such that the path between them does not intersect with another path during the same point in time. My task was to modify the Lazy CBS codebase such that the algorithm also outputs the final set of constraints that is used to rule out possible paths, such that the Lazy is formally an Explainable Multi-Agent Path Finding (XMAPF) algorithm. In addition, I added Python-to-C++ bindings, such that the compiled Lazy CBS codebase can be used as a Python-facing library for future projects. TypeScript \u0026amp; JavaScript # scr-web (and its scr-cli counterpart) is my previous attempt at building a full-stack social media scraper, which was abandoned due to the excessive number of dependencies and the rather large build-size. Kotlin # sp is my first attempt at building a Minecraft server plugin. This plugin adds the requirement that the player supplies the password (via a server command) before proper server interaction is allowed. Until as password is provided, the currently-unauthorized player is blinded and immobile. Statistics # Project Stars Forks Issues PRs Version cocainate stalk rake scr-web scr-cli sp FIT2082 ","date":"July 2, 2022","permalink":"/projects/","section":"Projects","summary":"Current Projects # Go # cocainate is a cross-platform re-implementation of the macOS utility caffeinate that keeps the screen turned on either until stopped, for a set duration of time or while another process still runs. stalk is a cross-platform file-watcher that can run a command after each file-system operation on a given file(s) or simply wait once until a file is changed. rake is a social media scraper that is interfaced via a server-side rendered HTML user interface (or a CLI), and is managed by a REST API and a NoSQL database.","title":"Projects"},{"content":"","date":"May 8, 2022","permalink":"/tags/bootstrap/","section":"Tags","summary":"","title":"bootstrap"},{"content":"","date":"May 8, 2022","permalink":"/tags/cli/","section":"Tags","summary":"","title":"cli"},{"content":"","date":"May 8, 2022","permalink":"/tags/client/","section":"Tags","summary":"","title":"client"},{"content":"","date":"May 8, 2022","permalink":"/tags/docker/","section":"Tags","summary":"","title":"docker"},{"content":"","date":"May 8, 2022","permalink":"/tags/full-stack/","section":"Tags","summary":"","title":"full-stack"},{"content":"","date":"May 8, 2022","permalink":"/tags/go/","section":"Tags","summary":"","title":"go"},{"content":"","date":"May 8, 2022","permalink":"/tags/linux/","section":"Tags","summary":"","title":"linux"},{"content":"","date":"May 8, 2022","permalink":"/tags/mac/","section":"Tags","summary":"","title":"mac"},{"content":"","date":"May 8, 2022","permalink":"/projects/rake/","section":"Projects","summary":"","title":"rake"},{"content":"","date":"May 8, 2022","permalink":"/tags/server/","section":"Tags","summary":"","title":"server"},{"content":"","date":"May 8, 2022","permalink":"/projects/stalk/","section":"Projects","summary":"","title":"stalk"},{"content":"","date":"May 8, 2022","permalink":"/tags/utility/","section":"Tags","summary":"","title":"utility"},{"content":"","date":"May 8, 2022","permalink":"/tags/windows/","section":"Tags","summary":"","title":"windows"},{"content":"","date":"March 12, 2022","permalink":"/projects/cocainate/","section":"Projects","summary":"","title":"cocainate"},{"content":"","date":"August 20, 2021","permalink":"/tags/c/","section":"Tags","summary":"","title":"c"},{"content":"","date":"August 20, 2021","permalink":"/tags/cpp/","section":"Tags","summary":"","title":"cpp"},{"content":"","date":"August 20, 2021","permalink":"/projects/fit2082/","section":"Projects","summary":"","title":"FIT2082 computer science research project"},{"content":"","date":"August 20, 2021","permalink":"/tags/mapf/","section":"Tags","summary":"","title":"mapf"},{"content":"","date":"August 20, 2021","permalink":"/tags/python/","section":"Tags","summary":"","title":"python"},{"content":"","date":"August 20, 2021","permalink":"/tags/research/","section":"Tags","summary":"","title":"research"},{"content":"","date":"August 20, 2021","permalink":"/tags/xmapf/","section":"Tags","summary":"","title":"xmapf"},{"content":"Prompt # Clam decided to return to classic cryptography and revisit the XOR cipher! Here\u0026rsquo;s some hex encoded cipher text:\nae27eb3a148c3cf031079921ea3315cd27eb7d02882bf724169921eb3a469920e07d0b883bf63c018869a5090e8868e331078a68ec2e468c2bf13b1d9a20ea0208882de12e398c2df60211852deb021f823dda35079b2dda25099f35ab7d218227e17d0a982bee7d098368f13503cd27f135039f68e62f1f9d3cea7c The key is 5 bytes long, and the flag is somewhere in the message.\nAnalysis # Assuming 2 hexadecimal digits are equivalent to 1 ASCII characters, a possible key can be found by XORing the ciphertext with the known 5-bytes long substring actf{.\nSolution # In an XOR Cipher, it is known that possible_key = ciphertext ^ known_cleartext. The python script attached:\nslices the ciphertext to all possible 5 characters-long (assuming 2 hexadecimal digits are equivalent to 1 ASCII characters) sections, computes possible_key = ciphertext ^ known_cleartext, for a known substring of actf{, expands the key to the ASCII length of the message, rotates the key to deal with cases where the known clear text is not in an index that is a multiple of the key length. Thanks to @Levon for this suggestion. recomputes the XOR to possibly decode the message and prints the possible message as ASCII. Initial Python Code # from typing import List from doctest import testmod from textwrap import wrap def xor(s: List[int], t: List[int]) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :param s: list of non-negative integers :param t: list of non-negative integers :return: XOR of the ith number of both lists \u0026#34;\u0026#34;\u0026#34; return [a ^ b for a, b in zip(s, t)] def expand_key(short_key: List[int], size: int) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :param short_key: list of non-negative integers :param size: positive integer :return: short_key * (size // len(short_key)) + short_key[:size - len(key_expanded)] \u0026gt;\u0026gt;\u0026gt; expand_key([1, 2, 3, 4, 5], 9) [1, 2, 3, 4, 5, 1, 2, 3, 4] \u0026#34;\u0026#34;\u0026#34; assert size \u0026gt; len(short_key) key_expanded = short_key * (size // len(short_key)) for ii in range(size - len(key_expanded)): key_expanded.append(short_key[ii]) return key_expanded ciphertext_text = input(\u0026#34;hex-encoded ciphertext: \u0026#34;) known_cleartext = input(\u0026#34;known cleartext (with length of key): \u0026#34;) hint = input(\u0026#34;hint (such as \u0026#39;flag\u0026#39;): \u0026#34;) cipher_ascii = [int(letter, 16) for letter in wrap(ciphertext_text, 2)] known_cleartext_ascii = [ord(letter) for letter in known_cleartext] for i in range(len(cipher_ascii) - len(known_cleartext)): key = xor(cipher_ascii[i:i + len(known_cleartext)], known_cleartext_ascii) expanded_key = expand_key(key, len(cipher_ascii)) message_ascii = xor(cipher_ascii, expanded_key) message_text = \u0026#34;\u0026#34;.join(map(chr, message_ascii)) if known_cleartext in message_text and hint in message_text: print(f\u0026#34;key: {key} (\u0026#39;{\u0026#39;\u0026#39;.join(map(chr, key))}\u0026#39;)\u0026#34;) print(f\u0026#34;message: {message_text}\u0026#34;) print() Improved Python Code # from typing import TypedDict, List from textwrap import wrap from pwn import xor class XORSolution(TypedDict): key: List[int] cleartext: str def decode_xor(ciphertext_hex: str, known_cleartext: str, hint: str) -\u0026gt; List[XORSolution]: output = [] cipher_ascii = bytes(int(letter, 16) for letter in wrap(ciphertext_hex, 2)) for i in range(len(cipher_ascii)): key = list(xor(cipher_ascii[i:i + len(known_cleartext)], known_cleartext.encode())) for ii in range(len(key)): rotated_key = key[-ii:] + key[:-ii] cleartext = str(xor(cipher_ascii, rotated_key))[2:-1] if known_cleartext in cleartext and hint in cleartext: output.append({\u0026#34;key\u0026#34;: rotated_key, \u0026#34;cleartext\u0026#34;: cleartext}) return output Python Script Output # A Python script that prints all valid solutions for the full ciphertext and the ciphertext without the first character: ciphertext_hex1 = \u0026#34;ae27eb3a148c3cf031079921ea3315cd27eb7d02882bf724169921eb3a469920e07d0b883bf63c018869a5090e8868e331078a68ec2e468c2bf13b1d9a20ea0208882de12e398c2df60211852deb021f823dda35079b2dda25099f35ab7d218227e17d0a982bee7d098368f13503cd27f135039f68e62f1f9d3cea7c\u0026#34; known_cleartext1 = \u0026#34;actf{\u0026#34; hint1 = \u0026#34;flag\u0026#34; for solution in decode_xor(ciphertext_hex1, known_cleartext1, hint1): print(f\u0026#34;key: {solution[\u0026#39;key\u0026#39;]})\u0026#34;) print(f\u0026#34;message: {solution[\u0026#39;cleartext\u0026#39;]}\u0026#34;) for solution in decode_xor(ciphertext_hex1[2:], known_cleartext1, hint1): print(f\u0026#34;key: {solution[\u0026#39;key\u0026#39;]})\u0026#34;) print(f\u0026#34;message: {solution[\u0026#39;cleartext\u0026#39;]}\u0026#34;) The output of the screen described immediately above: key: [237, 72, 133, 93, 102]) message: Congratulations on decrypting the message! The flag is actf{who_needs_aes_when_you_have_xor}. Good luck on the other crypto! key: [72, 133, 93, 102, 237]) message: ongratulations on decrypting the message! The flag is actf{who_needs_aes_when_you_have_xor}. Good luck on the other crypto! Flag: actf{who_needs_aes_when_you_have_xor}\nReferences # Szymański, Ł. (2021). ångstromCTF 2021: Exclusive Cipher. szymanski.ninja. https://szymanski.ninja/en/ctfwriteups/2021/angstromctf/exclusive-cipher/ ","date":"May 31, 2021","permalink":"/posts/angstromctf-exclusive-cipher/","section":"Posts","summary":"Prompt # Clam decided to return to classic cryptography and revisit the XOR cipher! Here\u0026rsquo;s some hex encoded cipher text:\nae27eb3a148c3cf031079921ea3315cd27eb7d02882bf724169921eb3a469920e07d0b883bf63c018869a5090e8868e331078a68ec2e468c2bf13b1d9a20ea0208882de12e398c2df60211852deb021f823dda35079b2dda25099f35ab7d218227e17d0a982bee7d098368f13503cd27f135039f68e62f1f9d3cea7c The key is 5 bytes long, and the flag is somewhere in the message.\nAnalysis # Assuming 2 hexadecimal digits are equivalent to 1 ASCII characters, a possible key can be found by XORing the ciphertext with the known 5-bytes long substring actf{.\nSolution # In an XOR Cipher, it is known that possible_key = ciphertext ^ known_cleartext.","title":"ångstromCTF Exclusive Cipher"},{"content":"","date":"May 31, 2021","permalink":"/tags/cryptography/","section":"Tags","summary":"","title":"cryptography"},{"content":"","date":"June 29, 2020","permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"kotlin"},{"content":"","date":"June 29, 2020","permalink":"/tags/minecraft/","section":"Tags","summary":"","title":"minecraft"},{"content":"","date":"June 29, 2020","permalink":"/projects/sp/","section":"Projects","summary":"","title":"sp"},{"content":"","date":"September 30, 2019","permalink":"/tags/angular/","section":"Tags","summary":"","title":"angular"},{"content":"","date":"September 30, 2019","permalink":"/tags/ionic/","section":"Tags","summary":"","title":"ionic"},{"content":"","date":"September 30, 2019","permalink":"/tags/nestjs/","section":"Tags","summary":"","title":"nestjs"},{"content":"","date":"September 30, 2019","permalink":"/tags/nx/","section":"Tags","summary":"","title":"nx"},{"content":"","date":"September 30, 2019","permalink":"/projects/scr-web/","section":"Projects","summary":"","title":"scr-web"},{"content":"","date":"September 30, 2019","permalink":"/tags/typescript/","section":"Tags","summary":"","title":"typescript"},{"content":"","date":"April 18, 2019","permalink":"/projects/scr-cli/","section":"Projects","summary":"","title":"scr-cli"},{"content":"","date":"January 1, 1","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]